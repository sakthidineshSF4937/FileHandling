



private async Task ProcessAndExtractPdfFormFields(PdfLoadedDocument loadedDocument, string parentId, string childId, string organizationId)
    {
      if (loadedDocument != null)
      {
        List<TextTagDefinition> combinedTags = new List<TextTagDefinition>();
        int pageIndex = 1;
        using DocumentTextExtractor documentTextExtractor = new DocumentTextExtractor(this.DocumentUploadDetails.DocumentArray);
        var documentTags = documentTextExtractor.ExtractTextTags(null, ref pageIndex);
        combinedTags.AddRange(documentTags);
        // Get all the form fields.
        PdfLoadedForm loadedForm = loadedDocument.Form;
        PdfLoadedFormFieldCollection fieldCollection = loadedForm?.Fields;
        List<PageFormElements> pageFormElements = new List<PageFormElements>();
        List<FormElement> formElements = new List<FormElement>();
        var finalFormElement = new PageFormElements();
        if (documentTags!=null)
        {
        foreach (var tagtexts in combinedTags.ToList())
          {
            finalFormElement = this.PrepareFormField(loadedDocument, tagtexts, tagtexts.Bounds, tagtexts.Type);
            pageFormElements.Add(finalFormElement);
         }
        }

        if (pageFormElements != null)
        {
           var group = pageFormElements.GroupBy(x => x.PageIndex).Select(x => x).ToList();
           List<PageFormElements> newPageFormElements = new List<PageFormElements>();
           for (int i = 0; i < group.Count; i++)
          {
            var checks = group[i].SelectMany(x => x.FormElements).ToList();
            PageFormElements formElement = new PageFormElements();
            formElement.PageIndex = group[i].Key;
            formElement.FormElements = checks.ToArray();
            newPageFormElements.Add(formElement);
          }

           if (newPageFormElements != null && newPageFormElements.Count > 0)
          {
            BlobContainerClient cloudBlobContainer = null;
            BlobClient blobClientDocument = null;
            cloudBlobContainer = await this.CloudStorage.GetContainer(parentId, organizationId).ConfigureAwait(false);
            if (string.IsNullOrEmpty(childId))
            {
              blobClientDocument = cloudBlobContainer.GetBlobClient($"{DbConstants.DocumentPdfFields}");
            }
            else
            {
              blobClientDocument = cloudBlobContainer.GetBlobClient($"{childId}{DbConstants.DocumentPdfFields}");
            }

            await this.CloudStorage.UploadFromByteArrayAsync(blobClientDocument, BinarySerializer.Serialize<List<PageFormElements>>(newPageFormElements), 0, true).ConfigureAwait(false);
            blobClientDocument = cloudBlobContainer.GetBlobClient($"{DbConstants.DocumentPdfFields}redact_PDF");
             await this.CloudStorage.UploadFromByteArrayAsync(blobClientDocument,documentTextExtractor.GetRedactedPdfDocument(combinedTags), 0, true).ConfigureAwait(false);  
           }
         }


______

   private FormElement CreateFormElementsFromPdfField(BoldSign.ApiManagement.Models.FieldType? field, BoldSign.ApiManagement.Models.Rectangle bounds, BoldSign.ApiManagement.Models.TextTags.Models.TextTagDefinition tag)
    {
      FormElement formElement = new FormElement();

      BoldSign.Base.Models.Rectangle bound = new BoldSign.Base.Models.Rectangle()
      {
        X = bounds.X,
        Y = bounds.Y,
        Height = bounds.Height,
        Width = bounds.Width
      };

      switch (field)
      {
        case BoldSign.ApiManagement.Models.FieldType.TextBox:
          {
            formElement.ElementType = "TextBox";
            if (tag.Font != null)
            {
              formElement.FontFamily = tag.Font.Name.ToString();
              formElement.FontSize = tag.Font.Size;
              formElement.FontColor = tag.Font.Color;
            }

            formElement.EnableWrapping = true;
            formElement.Bounds = bound;
            formElement.MaxHeight = bound.Height;
            formElement.MaxWidth = bound.Width;
            formElement.Index = tag.SignerIndex;
            formElement.Label = tag.Placeholder;

          }

          break;
        case BoldSign.ApiManagement.Models.FieldType.Signature:
          formElement.ElementType = "Signature";
          if (tag.Font != null)
          {
            formElement.FontFamily = tag.Font.Name.ToString();
            formElement.FontSize = tag.Font.Size;
            formElement.FontColor = tag.Font.Color;
          }

          formElement.EnableWrapping = false;
          formElement.Bounds = bound;
          formElement.MaxHeight = bounds.Height;
          formElement.MaxWidth = bounds.Width;
          break;

        case BoldSign.ApiManagement.Models.FieldType.EditableDate:
          formElement.ElementType = "EditableDate";
          if (tag.Font != null)
          {
            formElement.FontFamily = tag.Font.Name.ToString();
            formElement.FontSize = tag.Font.Size;
            formElement.FontColor = tag.Font.Color;
          }

          formElement.Label = tag.EditableDateFieldSettings.DateFormat;
          formElement.Bounds = bound;
          formElement.MaxHeight = bound.Height;
          formElement.MaxWidth = bound.Width;
          break;
        case BoldSign.ApiManagement.Models.FieldType.Initial:
          formElement.ElementType = "Initial";
          if (tag.Font != null)
          {
            formElement.FontFamily = tag.Font.Name.ToString();
            formElement.FontSize = tag.Font.Size;
            formElement.FontColor = tag.Font.Color;
          }

          formElement.Bounds = bound;
          formElement.MaxHeight = bound.Height;
          formElement.MaxWidth = bound.Width;
          break;
        case BoldSign.ApiManagement.Models.FieldType.Title:
          formElement.ElementType = "Title";
          if (tag.Font != null)
          {
            formElement.FontFamily = tag.Font.Name.ToString();
            formElement.FontSize = tag.Font.Size;
            formElement.FontColor = tag.Font.Color;
          }

          formElement.Bounds = bound;
          formElement.MaxHeight = bound.Height;
          formElement.MaxWidth = bound.Width;
          break;
        case BoldSign.ApiManagement.Models.FieldType.Company:
          formElement.ElementType = "Company";
          if (tag.Font != null)
          {
            formElement.FontFamily = tag.Font.Name.ToString();
            formElement.FontSize = tag.Font.Size;
            formElement.FontColor = tag.Font.Color;
          }

          formElement.Bounds = bound;
          formElement.MaxHeight = bound.Height;
          formElement.MaxWidth = bound.Width;
          break;
        case BoldSign.ApiManagement.Models.FieldType.DateSigned:
          formElement.ElementType = "DateSigned";
          if (tag.Font != null)
          {
            formElement.FontFamily = tag.Font.Name.ToString();
            formElement.FontSize = tag.Font.Size;
            formElement.FontColor = tag.Font.Color;
          }

          formElement.Bounds = bound;
          formElement.MaxHeight = bound.Height;
          formElement.MaxWidth = bound.Width;
          formElement.Label = tag.Placeholder;
          break;
      }

      formElement.SignerOrder = tag.SignerIndex.ToString();
      formElement.IsRequired = tag.IsRequired;
      formElement.AllowEditing = true;
      formElement.IsTextTag = true;
      return formElement;
    }

    private PageFormElements PrepareFormField(PdfLoadedDocument loadedDocument, BoldSign.ApiManagement.Models.TextTags.Models.TextTagDefinition tag, BoldSign.ApiManagement.Models.Rectangle bounds, BoldSign.ApiManagement.Models.FieldType? field)
    {
      List<FormElement> form = new List<FormElement>();
      FormElement formelement = this.CreateFormElementsFromPdfField(field, bounds, tag);
      if (formelement.ElementType != null)
      {
        form.Add(formelement);
      }

      PageFormElements preparedFields = new PageFormElements();
      preparedFields.PageIndex = tag.PageNumber;
      preparedFields.FormElements = form.ToArray();
      return preparedFields;
    }





[Test]
        public void TextTagonWebApp(){
               var documents = new DocumentUploadDetails()
                {
                    ParentDocumentId = "c8a6269e-f7ed-4969-8ea6-3eb0eae8c229",
                    DocumentClientId = "AozuR",
                    DocumentName = "TextTags-signer2.pdf",
                    ContentType = "application/pdf",
                    UploadRequestType = UploadRequestType.Document,
                    DocumentArray = File.ReadAllBytes(DataFile.PdfFilePath3)
                };
          List<TextTagDefinition> combinedTags = new List<TextTagDefinition>();
          int pageIndex = 1;
          using DocumentTextExtractor documentTextExtractor = new DocumentTextExtractor(documents.DocumentArray);
          var documentTags = documentTextExtractor.ExtractTextTags(null, ref pageIndex);
          combinedTags.AddRange(documentTags);
          using var loadedDocument = new PdfLoadedDocument(documents.DocumentArray);
           List<PageFormElements> pageFormElements = new List<PageFormElements>();
        List<FormElement> formElements = new List<FormElement>();
        var finalFormElement = new PageFormElements();
        if (documentTags!=null)
        {
        foreach (var tagtexts in combinedTags.ToList())
          {
            finalFormElement = repository.PrepareFormField(loadedDocument, tagtexts, tagtexts.Bounds, tagtexts.Type);
            pageFormElements.Add(finalFormElement);
         }
        }
         if (pageFormElements != null)
        {
           var group = pageFormElements.GroupBy(x => x.PageIndex).Select(x => x).ToList();
           List<PageFormElements> newPageFormElements = new List<PageFormElements>();
           for (int i = 0; i < group.Count; i++)
          {
            var checks = group[i].SelectMany(x => x.FormElements).ToList();
            PageFormElements formElement = new PageFormElements();
            formElement.PageIndex = group[i].Key;
            formElement.FormElements = checks.ToArray();
            newPageFormElements.Add(formElement);
          }

           if (newPageFormElements != null && newPageFormElements.Count > 0)
          {
            BlobContainerClient cloudBlobContainer = null;
            BlobClient blobClientDocument = null;
            cloudBlobContainer = await this.CloudStorage.GetContainer(parentId, organizationId).ConfigureAwait(false);
            if (string.IsNullOrEmpty(childId))
            {
              blobClientDocument = cloudBlobContainer.GetBlobClient($"{DbConstants.DocumentPdfFields}");
            }
            else
            {
              blobClientDocument = cloudBlobContainer.GetBlobClient($"{childId}{DbConstants.DocumentPdfFields}");
            }

            await this.CloudStorage.UploadFromByteArrayAsync(blobClientDocument, BinarySerializer.Serialize<List<PageFormElements>>(newPageFormElements), 0, true).ConfigureAwait(false);
       
