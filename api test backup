using System;
using AspNetCoreRateLimit;
using AutoMapper;
using BoldSign.ApiManagement.Service;
using BoldSign.Base.Models;
using BoldSign.Base.Models.RateLimit;
using BoldSign.Payment.Interfaces.DataServices;
using BoldSign.Payment.Models.RateLimit;
using Microsoft.Extensions.Options;
using Moq;
using NUnit.Framework;
using NUnit.Framework.Legacy;

[TestFixture]
public class RateLimitAttributeTests
{
    private RateLimitAttribute _rateLimitAttribute;
    private Mock<IClientPolicyStore> _clientPolicyStoreMock;
    private Mock<IMapper> _mapperMock;
    private Mock<IRateLimitingService> _rateLimitingServiceMock;
    private Mock<IOptions<ClientRateLimitOptions>> _optionsMock;

    [SetUp]
    public void SetUp()
    {
        _optionsMock = new Mock<IOptions<ClientRateLimitOptions>>();
        _mapperMock = new Mock<IMapper>();
        _rateLimitingServiceMock = new Mock<IRateLimitingService>();
        _clientPolicyStoreMock = new Mock<IClientPolicyStore>();

        _rateLimitAttribute = new RateLimitAttribute(
            _optionsMock.Object,
            _clientPolicyStoreMock.Object,
            null,  
            _mapperMock.Object,
            _rateLimitingServiceMock.Object
        );
    }

    [Test]
    public void GetRateLimitConfigForEndpoint_ShouldReturnCorrectConfigForEndpoint()
    {
        var rateLimitConfig = new RateLimitConfigurationOption
        {
            Burst = new BurstRateLimitConfig
            {
                Create = new RateLimitConfig { ProductionRateLimit = 10 },
                Read = new RateLimitConfig { ProductionRateLimit = 20 },
                Write = new RateLimitConfig { ProductionRateLimit = 30 },
                Delete = new RateLimitConfig { ProductionRateLimit = 40 }
            }
        };

        var methodInfo = typeof(RateLimitAttribute).GetMethod("GetRateLimitConfigForEndpoint", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

        var resultCreate = methodInfo.Invoke(_rateLimitAttribute, new object[] { "create", rateLimitConfig }) as RateLimitConfig;
        var resultRead = methodInfo.Invoke(_rateLimitAttribute, new object[] { "read", rateLimitConfig }) as RateLimitConfig;

        ClassicAssert.NotNull(resultCreate);
        ClassicAssert.AreEqual(10, resultCreate?.ProductionRateLimit);
        ClassicAssert.NotNull(resultRead);
        ClassicAssert.AreEqual(20, resultRead?.ProductionRateLimit);
    }

    [Test]
    public void CreateRateLimitRule_ShouldCreateCorrectRateLimitRule()
    {
        var rule = new RateLimitRules
        {
            Id = Guid.NewGuid(),
            IsWhiteList = false,
            Mode = Mode.Live,
            SubscriptionId = "sub1"
        };

        var config = new RateLimitConfig
        {
            ProductionRateLimit = 100,
            TestRateLimit = 50
        };

        var method = BurstRateLimitMethod.Create;
        var period = "1m";

        var methodInfo = typeof(RateLimitAttribute).GetMethod("CreateRateLimitRule", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

        var result = methodInfo.Invoke(_rateLimitAttribute, new object[] { rule, config, method, period }) as RateLimitRules;

        ClassicAssert.AreEqual(100, result?.Limit);
        ClassicAssert.AreEqual("1m", result?.Period);
        ClassicAssert.AreEqual(BurstRateLimitMethod.Create, result?.BurstMethod);
    }
}
