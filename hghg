     private PageFormElements PrepareFormField(PdfLoadedDocument loadedDocument,BoldSign.ApiManagement.Models.FieldType? field, BoldSign.Base.Models.Rectangle bounds = null)
    {
      List<FormElement> form = new List<FormElement>();
      FormElement formelement = this.CreateFormElementsFromPdfFields(field, bounds);
      if (formelement.ElementType != null)
      {
        form.Add(formelement);
      }

      PageFormElements preparedFields = new PageFormElements();
      preparedFields.PageIndex = loadedDocument.Pages.IndexOf(field.Page) + 1;
      preparedFields.FormElements = form.ToArray();
      return preparedFields;
    }


 private FormElement CreateFormElementsFromPdfFields(PdfLoadedField field, BoldSign.Base.Models.Rectangle bounds = null)
    {
      FormElement formElement = new FormElement();
      BoldSign.Base.Models.Rectangle bound = null;

      switch (field)
      {
        case PdfLoadedTextBoxField textBoxField:
          if (string.IsNullOrEmpty(textBoxField.Text))
          {
            formElement.ElementType = "TextBox";
            formElement.FontFamily = GetFontFamily(textBoxField.Font.Name);
            formElement.FontSize = this.converter.ConvertToPixels(textBoxField.Font.Size, PdfGraphicsUnit.Point);
            formElement.EnableWrapping = true;
            formElement.Bounds = bound = this.ConvertToPixelsFromPoints(textBoxField.Bounds);
            formElement.MaxHeight = bound.Height;
            formElement.MaxWidth = bound.Width;
          }

          break;
        case PdfLoadedSignatureField signatureField:
          formElement.ElementType = "Signature";
          formElement.FontFamily = GetFontFamily(signatureField.Font.Name);
          formElement.FontSize = signatureField.Font.Size;
          formElement.EnableWrapping = false;
          formElement.Bounds = bounds;
          formElement.MaxHeight = bounds.Height;
          formElement.MaxWidth = bounds.Width;
          break;
        case PdfLoadedCheckBoxField checkBoxField:
          formElement.ElementType = "CheckBox";
          formElement.FontFamily = GetFontFamily(checkBoxField.Font.Name);
          formElement.FontSize = checkBoxField.Font.Size;
          formElement.EnableWrapping = false;
          formElement.Value = "off";
          formElement.Bounds = bound = this.ConvertToPixelsFromPoints(checkBoxField.Bounds);
          formElement.MaxHeight = bound.Height;
          formElement.MaxWidth = bound.Width;
          break;
        case PdfLoadedRadioButtonListField radioField:
          formElement.ElementType = "RadioButton";
          formElement.FontFamily = GetFontFamily(radioField.Font.Name);
          formElement.FontSize = radioField.Font.Size;
          formElement.EnableWrapping = false;
          formElement.GroupName = field.Name;
          break;
        case PdfLoadedComboBoxField dropDownField:
          formElement.ElementType = "DropDown";
          formElement.FontFamily = GetFontFamily(dropDownField.Font.Name);
          formElement.FontSize = this.converter.ConvertToPixels(dropDownField.Font.Size, PdfGraphicsUnit.Point);
          formElement.EnableWrapping = false;
          formElement.Bounds = bound = this.ConvertToPixelsFromPoints(dropDownField.Bounds);
          formElement.MaxHeight = bound.Height;
          formElement.MaxWidth = bound.Width;
          formElement.Label = dropDownField.ActualFieldName;
          formElement.Value = dropDownField.SelectedValue;
          formElement.DropdownOptions = dropDownField.Values.ToList<PdfLoadedListItem>().Select(item => item.Value).ToArray();
          break;
      }

      formElement.Id = field.Name;
      formElement.IsRequired = field.Required;
      formElement.AllowEditing = true;
      return formElement;
    }

 FormElement formelement = this.CreateFormElementsFromPdfFields(field, bounds);

cannot convert from 'BoldSign.ApiManagement.Models.FieldType?' to 'Syncfusion.Pdf.Parsing.PdfLoadedField
