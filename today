    // [HttpDelete]
    // [Authorize(Policy = TemplateAuthorizationOption.CanDeleteTemplate)]
    // public async Task<IActionResult> DeleteTemplates([GuidArray(ErrorMessage = ValidationMessages.ValidDocumentId)][Required(ErrorMessage = ValidationMessages.Required)] string[] templateId)
    //  {
    //     if (templateId == null || templateId.Length == 0 || templateId.Any(string.IsNullOrEmpty))
    //     {
    //         return this.BadRequest("Failure");
    //     }

    //     try
    //     {

    //          bool allSucceeded = await this.templateService.DeleteTemplatesItemsAsync(templateId, this.authorizationService, this.documentService, this.userDataService, this.HttpContext, this.orgActivityService, this.hubContext, this.requestDetailsService);
    //          return allSucceeded ? this.Ok("Success") : this.BadRequest("Failure");
    //     }
    //     catch (CosmosException ex) when (ex.StatusCode.ToString().ToUpperInvariant() == this.documentService.DocumentClientNotFoundException)
    //     {
    //         return this.BadRequest("Failure");
    //     }
    //     catch (Exception ex)
    //     {
    //         return this.StatusCode(500, $"Internal server error: {ex.Message}");
    //     }
    // }


     /// <summary>
    /// /// Deletes the multiple templates by template id.
    /// </summary>
    /// <param name="templateIds">The temlate id array.</param>
    /// <param name="authorizationService">The authorization service.</param>
    /// <param name="documentService">The document service.</param>
    /// <param name="userDataService">The user data service.</param>
    /// <param name="context">The Http Context Value.</param>
    /// <param name="orgActivityService">The org activity service.</param>
    /// <param name="hubConnection">The notification hub.</param>
    /// <param name="requestDetailsService">The requestDetailsService.</param>
    /// <returns>A Task.</returns>
    Task<bool> DeleteTemplatesItemsAsync(string[] templateIds, IAuthorizationService authorizationService, IDocumentService documentService, UserDataService userDataService, HttpContext context, IOrgActivityService orgActivityService, IHubContext<NotificationHub> hubConnection, RequestDetailsService requestDetailsService);



    /// <summary>
    /// Deletes the template item.
    /// </summary>
    /// <param name="templateIds">The Template IDs array.</param>
    /// <param name="authorizationService">The authorization service.</param>
    /// <param name="documentService">The document service.</param>
    /// <param name="userDataService">The user data service.</param>
    /// <param name="context">The permission list.</param>
    /// <param name="orgActivityService">The org activity service.</param>
    /// <param name="hubConnection">The notification hub.</param>
    /// /// <param name="requestDetailsService">The requestDetailsService.</param>
    /// <returns>A Task.</returns>
    public virtual async Task<bool> DeleteTemplatesItemsAsync(string[] templateIds, IAuthorizationService authorizationService, IDocumentService documentService, UserDataService userDataService, HttpContext context, IOrgActivityService orgActivityService, IHubContext<NotificationHub> hubConnection, RequestDetailsService requestDetailsService)
    {
    var deleteResults = new ConcurrentDictionary<string, bool>();
    string baseUrl = requestDetailsService.HostedDomain;
    var deleteTasks = templateIds
        .Select(async templateId =>
        {
            try
            {
                var accessRightsList = await this.GetTemplatesByDocumentId(userDataService, templateId, false).ConfigureAwait(false);

                if (accessRightsList.Count == 0)
                {
                    deleteResults[templateId] = false;
                    return;
                }

                var result = await this.AddDeletedTemplateItemAsync(templateId, documentService, userDataService).ConfigureAwait(false);
                if (result)
                {
                  await documentService.NotifyDeletedTemplateUsers(accessRightsList, new Uri(baseUrl), hubConnection, this.teamManagement).ConfigureAwait(false);
                  _ = this.LogDeleteUserActivityAsync(accessRightsList, orgActivityService).ConfigureAwait(false);
                  deleteResults[templateId] = true;
                }
                else
                {
                    deleteResults[templateId] = false;
                }
            }
            catch (Exception)
            {
                deleteResults[templateId] = false;
            }
        })
        .ToList();

    await Task.WhenAll(deleteTasks).ConfigureAwait(false);
    return deleteResults.Values.All(result => result);
}

=====================================================

  TemplateDetailsReader

          // public async Task<AccessRightsDetails> GetAccessRights(PermissionsList permissionsList)
        // {
        //     if (string.IsNullOrEmpty(this.documentId)
        //         || string.IsNullOrEmpty(this.userDataService.Id)
        //         || string.IsNullOrEmpty(this.userDataService.OrganizationId))
        //     {
        //         return null;
        //     }

        //     // this.AccessRightsDetails = GetTemplateAccessRightsCache(this.context);
        //     var accessRightsCollection = await this.accessRightsService
        //         .GetTemplatesByDocumentId(this.elasticClient, this.userDataService, this.documentId)
        //         .ConfigureAwait(false);

        //     var teamIds = permissionsList?.Allow
        //             .Where(x => x.ResourceType == Permissions.TemplateResources
        //                 && x.Scope == Permissions.ResourcesInCollection)
        //             .Where(x => x.PermissionAccess.IsExists(Permissions.ViewAccessType, true))
        //             .Select(x => x.Resource)
        //             .ToList()
        //         ?? new List<string>();

        //     var deniedTeams = permissionsList?.Deny
        //             .Where(
        //                 x => x.ResourceType == Permissions.TemplateResources
        //                     && x.Scope == Permissions.ResourcesInCollection)
        //             .Where(x => x.PermissionAccess.IsExists(Permissions.ViewAccessType, false))
        //             .Select(x => x.Resource)
        //             .ToList()
        //         ?? new List<string>();

        //     var isAccountAdmin = permissionsList?.Allow
        //         .Any(x => x.Scope == Permissions.AllResources && x.ResourceType == Permissions.TemplateResources
        //                 && x.PermissionAccess.IsExists(Permissions.ViewAccessType, true))
        //         ?? false;

        //     teamIds = deniedTeams.Count == 0 ? teamIds : teamIds.Where(x => !deniedTeams.Any(y => y.IsEqual(x))).ToList();

        //     // Decision to take which access rights to process for this user from these priority
        //     // - Original template, Team owner access to the original template document
        //     // - Shared template, AccessTid matches with user's team id
        //     // - Shared template, AccessTid matches with user's team permissions (including custom team permission)
        //     // - Own template or access template as account admin
        //     // - If none of above matched, take default or first template as policy will decide to allow or not
        //     var accessRights =
        //         accessRightsCollection.FirstOrDefault(x =>
        //             x.AccessTid == null &&
        //             ((isAccountAdmin && !deniedTeams.Contains(x.SenderDetail.TeamId)) ||
        //              teamIds.Any(y => y.IsEqual(x.SenderDetail.TeamId))))
        //         ?? accessRightsCollection.FirstOrDefault(x => x.AccessTid != null && x.AccessTid == this.userDataService.TeamId)
        //         ?? accessRightsCollection.FirstOrDefault(x => teamIds.Contains(x.AccessTid))
        //         ?? accessRightsCollection.FirstOrDefault(x =>
        //             x.AccessTid == "*" && x.SenderDetail.OrganizationId == this.userDataService.OrganizationId)
        //         ?? accessRightsCollection.FirstOrDefault(
        //             x => x.AccessTid == null
        //                 && (x.SenderDetail.AccessUid == this.userDataService.Id
        //                     || x.SenderDetail.TeamId == this.userDataService.TeamId
        //                     || x.SenderDetail.OrganizationId == this.userDataService.OrganizationId))
        //         ?? accessRightsCollection.FirstOrDefault();

        //     this.AccessRightsDetails = accessRights;

        //     lock (this.context)
        //     {
        //         this.context.Items.Remove(AccessRightsData);

        //         // Skip adding access rights details to context because MergeTemplate policy handler itterates a list of template id's and same access rights details in context could affect policy execution.
        //         if (!this.context.Items.ContainsKey(StringValues.MergeTemplateList))
        //         {
        //             this.context.Items.Add(AccessRightsData, this.AccessRightsDetails);
        //         }
        //     }

        //     return this.AccessRightsDetails;
        // }
        // private async Task GetAndRefreshDocumentDetailsAsync()
        // {
        //     await this.context.LockedRunAsync(
        //             DocumentDetailsReader.DocumentDetailsData,
        //             async () =>
        //             {
        //                 this.DocumentDetails = DocumentDetailsReader.GetDocumentDetailsCache(this.context) ?? await this.extendedDocumentDetailsService.GetDocumentDetailsAsync(this.documentId).ConfigureAwait(false);
        //                 Console.WriteLine($"GetDocumentDetails: by using document id {this.documentId} and get document details id is {this.DocumentDetails?.Id}");
        //                 if (this.DocumentDetails != null && !string.IsNullOrEmpty(this.DocumentDetails.ModifiedTemplateId))
        //                 {
        //                     this.ModifiedTemplateId = this.DocumentDetails.ModifiedTemplateId;
        //                     this.DocumentDetails = await this.extendedDocumentDetailsService.GetDocumentDetailsAsync(this.DocumentDetails.ModifiedTemplateId).ConfigureAwait(false);
        //                     Console.WriteLine($"GetDocumentDetails: by using modified templateId {this.ModifiedTemplateId} for the document id {this.documentId}");
        //                 }
        //             },
        //             () =>
        //             {
        //                 if (this.DocumentDetails != null)
        //                 {
        //                     // Skip adding document details to context because MergeTemplate policy handler iterates a list of template id's and same document details in context could affect policy execution.
        //                     if (!this.context.Items.ContainsKey(StringValues.MergeTemplateList))
        //                     {
        //                         this.context.Items.TryAdd(DocumentDetailsReader.DocumentDetailsData, this.DocumentDetails);
        //                     }
        //                 }
        //             })
        //         .ConfigureAwait(false);
        // }


        //        [Category("DeleteMultipleTemplate")]
//        [Test]
//        public async Task DeleteMultipleTemplate()
//        {
//         var mockElasticClient = new Mock<IElasticClient>();
//         var mockCacheService = new Mock<ICacheService>();
//         var mockTeamManagement = new Mock<ITeamManagement>();
//         var mockContextAccessor = new Mock<IHttpContextAccessor>();
//         var mockMapper = new Mock<IMapper>();
//         var mockApiRequestService = new Mock<IApiRequestService>();
//         var mockDocumentContentService = new Mock<IDocumentContentService>();
//         var templateServiceMock = new Mock<TemplateService>(mockElasticClient.Object,mockCacheService.Object,mockTeamManagement.Object,mockContextAccessor.Object,mockMapper.Object,mockApiRequestService.Object,mockDocumentContentService.Object);    
//         templateServiceMock.Setup(x => x.DeleteTemplatesAsync(
//                                    It.IsAny<string>(),               
//                                    It.IsAny<string[]>(),             
//                                    It.IsAny<IAuthorizationService>(), 
//                                    It.IsAny<IDocumentService>(),     
//                                    It.IsAny<UserDataService>(),      
//                                    It.IsAny<HttpContext>(),  
//                                    It.IsAny<IOrgActivityService>(), 
//                                    It.IsAny<IHubContext<NotificationHub>>(),
//                                    It.IsAny<RequestDetailsService>() 
//                                )).ReturnsAsync(true); 
//         var documentServiceMock = new Mock<IDocumentService>();
//         documentServiceMock.Setup(x => x.DocumentClientNotFoundException).Returns("NOTFOUND");
//         PermissionsList permissionsList = new PermissionsList()
//     {
//         Allow = new List<ViewPermissionDetails>()
//         {
//             new ViewPermissionDetails()
//             {
//                 ResourceType = "Document",
//                 Scope = Permissions.SpecificResource,
//                 Resource = "1dff9b4a-323e-49ed-9355-e382770c1876", 
//                 PermissionAccess = new List<PermissionAccess>()
//                 {
//                     new PermissionAccess()
//                     {
//                         CanDelete = true, 
//                         CanWrite = true,
//                         CanView = true,
//                     }
//                 }
//             }
//         },
//         Deny = new List<ViewPermissionDetails>(),
//     };

//     var httpContext = new DefaultHttpContext();
//     var user = new ClaimsPrincipal(new ClaimsIdentity(new List<Claim>
//     {
//         new Claim(ClaimTypes.Name, "Test User"),
//         new Claim(ClaimTypes.NameIdentifier, "1")
//     }));

//     httpContext.User = user;  
//     httpContext.Items[Permissions.PermissionListConst] = permissionsList;

//     var templateController = new TemplateController(userDataService,userManagement,templateServiceMock.Object,documentServiceMock.Object,authorizationService,accessRightsServices,notificationHub,orgActivityService,mapper,teamManagement,requestDetailsService,cacheService,apiRequestServiceMock.Object);

//     templateController.ControllerContext.HttpContext = httpContext;

//     var queryCollection = new Dictionary<string, StringValues>
//     {
//         { "documentId", new StringValues("1dff9b4a-323e-49ed-9355-e382770c1876") }
//     };

//     var query = new QueryCollection(queryCollection);
//     templateController.ControllerContext.HttpContext.Request.Query = query;

//     cache.As<IDistributedCache>().Setup(x => x.GetAsync(It.IsAny<string>(), It.IsAny<CancellationToken>()))
//         .Returns(Task.FromResult(BinarySerializer.Serialize(permissionsList)));

//     var result = await templateController.DeleteTemplates(new string[] 
//     { 
//         "1dff9b4a-323e-49ed-9355-e382770c1876", 
//         "1dff9b4a-323e-49ed-9355-e382770c1873" 
//     }).ConfigureAwait(false);

    
//     ClassicAssert.IsInstanceOf<OkObjectResult>(result); 
// }
