    private async Task ProcessAndExtractPdfFormFields(PdfLoadedDocument loadedDocument, string parentId, string childId, string organizationId)
    {
      if (loadedDocument != null)
      {
        List<TextTagDefinition>  definitionTags=null;
        // Get all the form fields.
      //  List<TextTagDefinition> textTags= documentTextExtractor.ExtractTextTags( definitionTags,ref pageIndex);
       var pageIndex=0;
     List<TextTagDefinition> tags = new List<TextTagDefinition>();

      for (int i = 0; i < loadedDocument.Pages.Count; i++)
      {
        TextLineCollection textLineCollection = null;
        loadedDocument.Pages[i].ExtractText(out textLineCollection);

        foreach (var textLine in textLineCollection.TextLine)
        {
          definitionTags = definitionTags == null ? new List<TextTagDefinition>() : definitionTags;
          TextTagParser textParser = new TextTagParser(new List<string>() { textLine.Text }, definitionTags);
          var parsedTags = textParser.Parse();
          Syncfusion.Drawing.SizeF pageSize = loadedDocument.Pages[i].Size;
          this.SetBounds(textLine, parsedTags, pageSize);
          int index = 1;
          parsedTags = parsedTags.Select(
              c =>
              {
                c.PageNumber = index;

                return c;
              })
            .ToList();
          tags.AddRange(parsedTags);
        }

        pageIndex++;
      }
        PdfLoadedForm loadedForm = loadedDocument.Form;
        PdfLoadedFormFieldCollection fieldCollection = loadedForm?.Fields;
        List<PageFormElements> pageFormElements = new List<PageFormElements>();
        List<FormElement> formElements = new List<FormElement>();
        var finalFormElement = new PageFormElements();

        if (fieldCollection != null)
        {
          foreach (PdfLoadedField field in fieldCollection)
          {
            switch (field)
            {
              case PdfLoadedTextBoxField textBoxField:
              case PdfLoadedCheckBoxField checkBoxField:
              case PdfLoadedComboBoxField dropDownField:

                finalFormElement = this.PrepareFormFields(loadedDocument, field);
                pageFormElements.Add(finalFormElement);
                break;

              case PdfLoadedSignatureField signatureField:
                {
                // condition to avoid extracting the fields from signed document.
                if (signatureField.Bounds.X != 0 && signatureField.Bounds.Y != 0)
                {
                  var bounds = this.ConvertToPixelsFromPoints(signatureField.Bounds);
                  finalFormElement = this.PrepareFormFields(loadedDocument, field, bounds);
                  pageFormElements.Add(finalFormElement);
                }
                }

                break;

              case PdfLoadedRadioButtonListField radioButton:
                {
                  PdfLoadedRadioButtonItemCollection radioCollection = radioButton.Items;
                  List<FormElement> childFormElement = new List<FormElement>();
                  foreach (PdfLoadedRadioButtonItem item in radioCollection)
                  {
                    var bound = this.ConvertToPixelsFromPoints(item.Bounds);
                    FormElement childForm = new FormElement();
                    childForm.Id = item.OptionValue;
                    childForm.ElementType = "child";
                    childForm.Bounds = bound;
                    childForm.GroupName = field.Name;
                    childForm.FontFamily = GetFontFamily(item.Font.Name);
                    childForm.FontSize = item.Font.Size;
                    childForm.AllowEditing = true;
                    childForm.EnableWrapping = false;
                    childForm.IsRequired = true;
                    childFormElement.Add(childForm);
                  }

                  finalFormElement = this.PrepareFormFields(loadedDocument, field);
                  finalFormElement.FormElements[0].Children = childFormElement.ToArray();
                  pageFormElements.Add(finalFormElement);
              }

                break;
            }
          }

          var group = pageFormElements.GroupBy(x => x.PageIndex).Select(x => x).ToList();
          List<PageFormElements> newPageFormElements = new List<PageFormElements>();

          // forming page form elements based on the page index value.
          for (int i = 0; i < group.Count; i++)
          {
            var checks = group[i].SelectMany(x => x.FormElements).ToList();
            PageFormElements formElement = new PageFormElements();
            formElement.PageIndex = group[i].Key;
            formElement.FormElements = checks.ToArray();
            newPageFormElements.Add(formElement);
          }

          if (newPageFormElements != null && newPageFormElements.Count > 0)
          {
            BlobContainerClient cloudBlobContainer = null;
            BlobClient blobClientDocument = null;
            cloudBlobContainer = await this.CloudStorage.GetContainer(parentId, organizationId).ConfigureAwait(false);
            if (string.IsNullOrEmpty(childId))
            {
              blobClientDocument = cloudBlobContainer.GetBlobClient($"{DbConstants.DocumentPdfFields}");
            }
            else
            {
              blobClientDocument = cloudBlobContainer.GetBlobClient($"{childId}{DbConstants.DocumentPdfFields}");
            }

            await this.CloudStorage.UploadFromByteArrayAsync(blobClientDocument, BinarySerializer.Serialize<List<PageFormElements>>(newPageFormElements), 0, true).ConfigureAwait(false);
          }
        }
      }
    }
