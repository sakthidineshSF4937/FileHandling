updateAutoDetectedProperties (pageInfo: PageInfo, formElement: FormElement) {
      const elementType = formElement.id = formElement.elementType;
      formElement.isAutoDetectedField = true;
      if (elementType === 'checkbox' || elementType === 'radiobutton') {
        const isRadioButton = elementType === 'radiobutton';
        formElement.bounds = isRadioButton ? { x: 0, y: 0, width: 0, height: 0 } : formElement.bounds;
        let selectedFormElement: FormElement = this.fieldContainerInstance.formElements.find((f: FormElement) => f.elementType === formElement.elementType);
        selectedFormElement = isRadioButton ? selectedFormElement.children[0] : selectedFormElement;
        const width = isRadioButton ? formElement.children[0].bounds.width : formElement.bounds.width;
        const elementSize = this.setSize(Math.round(width - selectedFormElement.paddingLeft + selectedFormElement.paddingRight));
        formElement.bounds.width = formElement.width = elementSize + selectedFormElement.paddingLeft + selectedFormElement.paddingRight;
        formElement.bounds.height = formElement.height = elementSize + selectedFormElement.paddingTop + selectedFormElement.paddingBottom;
        if (isRadioButton) {
          formElement.x = formElement.y = 0;
          formElement.enableChildDrag = true;
          const $this = this;
          formElement.children.forEach(function (c) {
            c.y = c.bounds.y = pageInfo.pageBounds.y + Math.round(c.bounds.y + $this.pdfFormElement.pageMargin) - selectedFormElement.paddingTop;
            c.x = c.bounds.x = pageInfo.pageBounds.x + c.bounds.x - selectedFormElement.paddingLeft;
            c.id = 'radioChild';
            c.value = 'off';
            c.width = c.bounds.width = formElement.width;
            c.height = c.bounds.height = formElement.height;
          });
        } else {
          formElement.bounds.x = formElement.x = formElement.bounds.x + pageInfo.pageBounds.x - selectedFormElement.paddingLeft;
          formElement.bounds.y = formElement.y = pageInfo.pageBounds.y + Math.round(formElement.bounds.y + this.pdfFormElement.pageMargin) - selectedFormElement.paddingTop;
          formElement.value = this.$session.mainData.isSelfSign ? 'on' : formElement.value;
        }
      } else {
        formElement.x = formElement.bounds.x = formElement.bounds.x + pageInfo.pageBounds.x;
        formElement.y = formElement.bounds.y = pageInfo.pageBounds.y + Math.round(formElement.bounds.y + this.pdfFormElement.pageMargin);
        if (elementType === 'textbox') {
          formElement.textType = 'None';
        }
      }
      const signerDetails: any = this.$session.signerData.signerDetails;
      const signerDetails1 = this.$nuxt.$session.signerData.signerDetails;
      const signerDetail = this.$data.selectedRecipients ? signerDetails.find(x => x.id === this.$data.selectedRecipients) : signerDetails[0];
      // formElement.fill1 = signerDetail.color1;
      // formElement.fill2 = signerDetail.color2;
      // formElement.signerId = signerDetail.id;
    }



      public updateFieldPropertyValues (formElement: FormElement, isAutoDetected?: boolean, position?: Point, pageFormElements?: PageFormElements[]): FormElement {
    debugger
    const formField: FormElement = formElement.elementType === 'checkbox' ? JSON.parse(JSON.stringify(formElement)) : this.cloneObject(formElement);
    formField.isAutoDetectedField = isAutoDetected;
    formField.id += '_' + UtilityMethods.getUniqueID();
    if (formField.elementType === 'checkbox') {
      formField.groupName += '_' + UtilityMethods.getUniqueID();
    }
    if (!this.preventNamingField) {
      formField.name = '';
      this.getFieldName(formField, pageFormElements);
    }
    if (formElement.elementType === 'radiobutton') {
      for (const childFormElement of formField.children) {
        childFormElement.id += '_' + UtilityMethods.getUniqueID();
        childFormElement.parent = formField.id;
        if (!this.preventNamingField) {
          let nameNumberChild = this.getChildNameNumber(formField.children, childFormElement.nameNumber, pageFormElements);
          childFormElement.name = 'RadioGroupChild' + ++nameNumberChild;
          childFormElement.nameNumber = nameNumberChild;
        }
      }
    }

    if (position) {
      if (formField.elementType === 'radiobutton') {
        const fieldBounds = this.formRendering.getChildrenBounds(formElement.children);
        for (const childFormElement of formField.children) {
          childFormElement.bounds.x = childFormElement.x = (position.x - fieldBounds.x) + childFormElement.x;
          childFormElement.bounds.y = childFormElement.y = (position.y - fieldBounds.y) + childFormElement.y;
        }
      } else {
        formField.bounds.x = formField.x = position.x;
        formField.bounds.y = formField.y = position.y;
      }

      this.updateAutoPositionSettings('startPosition', formField, position);
    }

    return formField;
  }

   public cloneObject (formElement: FormElement): FormElement {
    if (formElement.id === 'multipleSelection') {
      return this.cloneMultipleSelection(formElement);
    } else if (formElement.elementType === 'checkbox' && formElement.groupName) {
      return this.cloneCheckboxGroup(formElement);
    } else {
      const clonedFormElement: FormElement = JSON.parse(JSON.stringify(formElement));
      clonedFormElement.isAutoDetectedField = false;
      return clonedFormElement;
    }
  }

  {
    "id": "datesigned",
    "index": 0,
    "tabIndex": 0,
    "pageIndex": 0,
    "elementType": "datesigned",
    "bounds": {
        "x": 346.30667,
        "y": 140,
        "width": 170.97066,
        "height": 16
    },
    "originalImageBounds": null,
    "scaledBounds": null,
    "value": null,
    "label": null,
    "timeFormat": null,
    "fontSize": 12,
    "fill1": "#FAEA9E",
    "fill2": "#FDF7DB",
    "stroke1": null,
    "stroke2": null,
    "signerId": "s_m3syx",
    "signerName": null,
    "isRequired": true,
    "signatureType": null,
    "fontColor": "#000000",
    "textDecoration": false,
    "textType": "Number",
    "fixedWidth": 0,
    "maxWidth": 170.97066,
    "maxHeight": 16,
    "minWidth": 0,
    "minHeight": 0,
    "fontStyle": false,
    "fontFamily": "Helvetica",
    "regex": null,
    "regexDescription": null,
    "fontWeight": false,
    "allowEditing": true,
    "paddingLeft": 0,
    "paddingTop": 0,
    "paddingRight": 0,
    "paddingBottom": 0,
    "lineHeight": 0,
    "linePadding": 0,
    "enableWrapping": false,
    "children": null,
    "enableChildDrag": false,
    "signData": null,
    "isDeleted": false,
    "isReadOnly": false,
    "groupName": null,
    "name": null,
    "attachmentDetails": null,
    "attachmentInfo": null,
    "checkboxConditionInfo": null,
    "imageInfo": null,
    "nameNumber": 0,
    "anchorText": null,
    "anchorTextGroupName": null,
    "autoPositionSettings": null,
    "modifiedSignerId": null,
    "maxDate": null,
    "minDate": null,
    "conditionalRules": null,
    "parentRule": null,
    "isAutoDetectedField": true,
    "dropdownOptions": null,
    "dataSyncTag": null,
    "textAlign": "Left",
    "textDirection": "LTR",
    "characterSpacing": 0,
    "isNewField": false,
    "idPrefix": null,
    "restrictIdPrefixChange": false,
    "backgroundColor": null,
    "formulaExpression": null,
    "roundTo": 0,
    "resizeOption": null,
    "originalFontSize": null,
    "isAIField": false,
    "placeholder": null,
    "x": 346.30667,
    "y": 140
}

 public updateFieldPropertyValues (formElement: FormElement, isAutoDetected?: boolean, position?: Point, pageFormElements?: PageFormElements[]): FormElement {
    debugger
    const formField: FormElement = formElement.elementType === 'checkbox' ? JSON.parse(JSON.stringify(formElement)) : this.cloneObject(formElement);
    formField.isAutoDetectedField = isAutoDetected;
    formField.id += '_' + UtilityMethods.getUniqueID();
    if (formField.elementType === 'checkbox') {
      formField.groupName += '_' + UtilityMethods.getUniqueID();
    }
    if (!this.preventNamingField) {
      formField.name = '';
      this.getFieldName(formField, pageFormElements);
    }
    if (formElement.elementType === 'radiobutton') {
      for (const childFormElement of formField.children) {
        childFormElement.id += '_' + UtilityMethods.getUniqueID();
        childFormElement.parent = formField.id;
        if (!this.preventNamingField) {
          let nameNumberChild = this.getChildNameNumber(formField.children, childFormElement.nameNumber, pageFormElements);
          childFormElement.name = 'RadioGroupChild' + ++nameNumberChild;
          childFormElement.nameNumber = nameNumberChild;
        }
      }
    }

    if (position) {
      if (formField.elementType === 'radiobutton') {
        const fieldBounds = this.formRendering.getChildrenBounds(formElement.children);
        for (const childFormElement of formField.children) {
          childFormElement.bounds.x = childFormElement.x = (position.x - fieldBounds.x) + childFormElement.x;
          childFormElement.bounds.y = childFormElement.y = (position.y - fieldBounds.y) + childFormElement.y;
        }
      } else {
        formField.bounds.x = formField.x = position.x;
        formField.bounds.y = formField.y = position.y;
      }

      this.updateAutoPositionSettings('startPosition', formField, position);
    }

    return formField;
  }
 private getNameNumber (nameNumber: number, elementType: string, pageFormElements?: PageFormElements[]): number {
    let totalFormElement: FormElement = null;
    let pageFormElementsList: PageFormElements[] = null;
    if (pageFormElements) {
      pageFormElementsList = pageFormElements;
    } else {
      pageFormElementsList = this.pageFormElementsList;
    }

    for (const pageFormElement of pageFormElementsList) {
      const formElements: FormElement[] = pageFormElement.formElements.filter(x => x.elementType === elementType);
      for (const formElement of formElements) {
        if (!totalFormElement) {
          totalFormElement = formElement;
        } else if (formElement.nameNumber > totalFormElement.nameNumber) {
          totalFormElement = formElement;
        }
      }
    }
    return !totalFormElement ? nameNumber : totalFormElement.nameNumber;
  }
    
    
    elementType

    
: 
"datesigned"
nameNumber
: 
0
pageFormElements
: 
undefined

[
    {
        "pageIndex": 1,
        "formElements": [
            {
                "elementType": "datesigned",
                "id": "datesigned_n9CdG",
                "value": null,
                "fontSize": 12,
                "fill1": "#FAEA9E",
                "fill2": "#FDF7DB",
                "stroke1": "#fdf7db",
                "stroke2": "#fdf7db",
                "isRequired": true,
                "signerId": "s_m3syx",
                "signatureType": "",
                "fontColor": "#000000",
                "backgroundColor": null,
                "fontStyle": false,
                "textDecoration": false,
                "isImageCropped": false,
                "fixedWidth": 0,
                "pageIndex": 0,
                "tabIndex": 0,
                "textType": "Number",
                "fontFamily": "Helvetica",
                "regex": "",
                "regexDescription": "",
                "fontWeight": false,
                "visibility": true,
                "allowEditing": true,
                "originalImageBounds": null,
                "x": 349.50668,
                "y": 107,
                "width": 62.751995,
                "maxWidth": 62.751995,
                "maxHeight": 16,
                "minWidth": 0,
                "minHeight": 0,
                "bounds": {
                    "x": 349.50668,
                    "y": 107,
                    "width": 62.751995,
                    "height": 16
                },
                "label": "",
                "timeFormat": "None",
                "signerName": "",
                "enableWrapping": false,
                "enableChildDrag": false,
                "signData": "",
                "isSelected": false,
                "linePadding": 17,
                "isReadOnly": false,
                "lineHeight": 0,
                "name": "DateSigned1",
                "anchorText": null,
                "anchorTextGroupName": null,
                "parentRule": null,
                "conditionalRules": [],
                "attachmentInfo": {
                    "title": "",
                    "description": "",
                    "allowDocumentFiles": true,
                    "allowImageFiles": true,
                    "allowPdfFiles": true
                },
                "attachmentDetails": [],
                "imageInfo": {
                    "title": "",
                    "description": "",
                    "allowJPGFiles": true,
                    "allowSVGFiles": true,
                    "allowPNGFiles": true,
                    "allowBMPFiles": true
                },
                "autoPositionSettings": {
                    "startPosition": {
                        "x": 0,
                        "y": 0
                    },
                    "relativePosition": {
                        "x": 0,
                        "y": 0
                    }
                },
                "nameNumber": 0,
                "minDate": null,
                "maxDate": null,
                "isAutoDetectedField": true,
                "dataSyncTag": "",
                "dropdownOptions": [],
                "textAlign": "Left",
                "textDirection": "LTR",
                "characterSpacing": 0,
                "isNewField": false,
                "idPrefix": null,
                "formulaExpression": null,
                "roundTo": 0,
                "restrictIdPrefixChange": false,
                "groupName": null,
                "checkboxConditionInfo": {
                    "conditionType": "Minimum",
                    "minimum": 0,
                    "maximum": 0,
                    "absolute": 0
                },
                "originalFontSize": 12,
                "height": 16,
                "paddingLeft": 4
            }
        ]
    }
]

 private getFieldName (formElement: FormElement, pageFormElements?: PageFormElements[]): void {
    if (!formElement.name) {
      const elementType = formElement.elementType;
      formElement.nameNumber = this.getNameNumber(formElement.nameNumber, elementType);
      switch (elementType) {
        case 'signature':
          formElement.name = this.getProperName('Signature', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'initial':
          formElement.name = this.getProperName('Initial', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'checkbox':
          formElement.name = this.getProperName('CheckBox', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'radiobutton':
          formElement.name = this.getProperName('RadioGroup', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'textbox':
          formElement.name = this.getProperName('TextBox', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'datepicker':
          formElement.name = this.getProperName('DatePicker', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'email':
          formElement.name = this.getProperName('Email', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'name':
          formElement.name = this.getProperName('Name', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'label':
          formElement.name = this.getProperName('Label', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'attachment':
          formElement.name = this.getProperName('Attachment', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'image':
          formElement.name = this.getProperName('Image', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'editabledate':
          formElement.name = this.getProperName('EditableDate', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'hyperlink':
          formElement.name = this.getProperName('Hyperlink', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'dropdown':
          formElement.name = this.getProperName('Dropdown', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'title':
          formElement.name = this.getProperName('Title', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'company':
          formElement.name = this.getProperName('Company', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'formula':
          formElement.name = this.getProperName('Formula', formElement.nameNumber, formElement.idPrefix, pageFormElements);
          break;
        case 'datesigned':
          formElement.name = this.getProperName('DateSigned', formElement.nameNumber, formElement.idPrefix, pageFormElements)
      }
    }
  }
  ublic getProperName (currentName: string, nameNumber: number, idFormat: string, pageFormElements?: PageFormElements[]): string {
    const currentValue = (idFormat || currentName) + ++nameNumber;
    let isExist = false;
    let pageFormElementsList: PageFormElements[] = null;
    if (pageFormElements) {
      pageFormElementsList = pageFormElements;
    } else {
      pageFormElementsList = this.pageFormElementsList;
    }

    for (const pageFormElement of pageFormElementsList) {
      const formElements: FormElement[] = pageFormElement.formElements;
      if (formElements.find(x => x.name === currentValue)) {
        isExist = true;
        break;
      }
    }
    if (isExist) {
      return this.getProperName(currentName, nameNumber, idFormat, pageFormElements);
    }

    return currentValue;
  } public getProperName (currentName: string, nameNumber: number, idFormat: string, pageFormElements?: PageFormElements[]): string {
    const currentValue = (idFormat || currentName) + ++nameNumber;
    let isExist = false;
    let pageFormElementsList: PageFormElements[] = null;
    if (pageFormElements) {
      pageFormElementsList = pageFormElements;
    } else {
      pageFormElementsList = this.pageFormElementsList;
    }

    for (const pageFormElement of pageFormElementsList) {
      const formElements: FormElement[] = pageFormElement.formElements;
      if (formElements.find(x => x.name === currentValue)) {
        isExist = true;
        break;
      }
    }
    if (isExist) {
      return this.getProperName(currentName, nameNumber, idFormat, pageFormElements);
    }

    return currentValue;
  }  private addSVGElement (selectedItem: FormElement): void {
    const cloneItem: FormElement = this.initDefaults(selectedItem);
    this.addFormElement(cloneItem);
    const pageBounds: BoundingRect = this.getPageInfoByFormElement(this.selectedFormElement).pageBounds;
    if (!cloneItem.isNewField && cloneItem.value && cloneItem.resizeOption && cloneItem.resizeOption !== ResizeOptions.GrowVertically) {
      const textarea: any = this.createTextAreaContainer(this.selectedFormElement, this.selectedFormElement.value);
      const evt = { target: null };
      if (this.selectedFormElement.resizeOption === ResizeOptions.GrowBoth) {
        this.horizontalMultiline(evt, pageBounds, this.selectedFormElement, textarea);
        this.updateElementWidthOnResizing(evt, this.selectedFormElement, textarea);
      } else if (this.selectedFormElement.resizeOption === ResizeOptions.GrowHorizontally) {
        this.selectedFormElement.value = this.horizontalSingleLine(evt, pageBounds, this.selectedFormElement, textarea);
        this.updateElementWidthOnResizing(evt, this.selectedFormElement, textarea);
      } else if (this.selectedFormElement.resizeOption === ResizeOptions.Fixed || this.selectedFormElement.resizeOption === ResizeOptions.AutoResizeFont) {
        this.selectedFormElement.value = this.fixedOption(evt, this.selectedFormElement, textarea);
      }
      this.removeTextArea();
    }
    this.formRendering.renderFormElement(cloneItem, this.parentGroupNode, !!this.draggingOn);
  }
  public renderFormElement (cloneItem: FormElement, parentNode: Element, isDisabledMode?: boolean) {
    const element: SVGGElement = this.svgContext.createGroup({
      id: cloneItem.id,
      transform: 'translate(' + (isDisabledMode ? 0 : cloneItem.x) + ',' +
              (isDisabledMode ? 0 : cloneItem.y) + ')'
    });
    parentNode.appendChild(element);
    let fill1: string = cloneItem.fill1; let fill2: string = cloneItem.fill2;
    let stroke1: string = cloneItem.stroke1; let stroke2: string = cloneItem.stroke2;
    if (isDisabledMode) {
      fill1 = '#cccccc';
      fill2 = stroke1 = stroke2 = '#e6e6e6';
    }

    if (Browser.isIE) {
      element.setAttribute('class', 'pdf-form-element');
      if (!cloneItem.allowEditing && (cloneItem.elementType === 'label' || cloneItem.elementType === 'hyperlink' || cloneItem.elementType === 'radiobutton' || cloneItem.elementType === 'checkbox' || cloneItem.elementType === 'formula')) {
        element.setAttribute('class', 'pdf-form-element disabled-field');
      }
    } else {
      element.classList.add('pdf-form-element');
      if (!cloneItem.allowEditing && (cloneItem.elementType === 'label' || cloneItem.elementType === 'hyperlink' || cloneItem.elementType === 'radiobutton' || cloneItem.elementType === 'checkbox' || cloneItem.elementType === 'formula')) {
        element.classList.add('disabled-field');
      }
    }
    if (cloneItem.elementType === 'checkbox') {
      element.appendChild(this.svgContext.createRect({
        id: cloneItem.id + '_backRect',
        width: cloneItem.width,
        height: cloneItem.height,
        fill: fill2
      }));
      element.appendChild(this.svgContext.createRect({
        id: cloneItem.id + '_rect1',
        width: cloneItem.paddingLeft / 2,
        height: cloneItem.height,
        fill: fill1
      }));
      const checkBoxWidth: number = cloneItem.width - (cloneItem.paddingLeft + cloneItem.paddingRight);
      const checkBoxHeight: number = cloneItem.height - (cloneItem.paddingTop + cloneItem.paddingBottom);
      const checkboxRect: Element = this.svgContext.createRect({
        id: cloneItem.id + '_rect2',
        x: cloneItem.paddingLeft,
        y: cloneItem.paddingTop,
        width: checkBoxWidth,
        height: checkBoxHeight,
        fill: '#ffffff',
        stroke: '#b3bbc5',
        rx: 2
      });

      checkboxRect.setAttribute('ry', '2');
      element.appendChild(checkboxRect);
      if (cloneItem.value === 'on') {
        element.appendChild(this.svgContext.createPath({
          id: element.id + '_tick',
          fill: 'none',
          stroke: 'var(--bs-primary-button-color)',
          d: this.getTickPath(checkBoxWidth),
          transform: 'translate(2,2)',
          'stroke-width': 2
        }));
      }
      if (cloneItem.isRequired && cloneItem.value !== 'on') {
        this.createCheckboxRequiredField(cloneItem, element);
      }
    } else if (cloneItem.elementType === 'radiobutton') {
      for (const childFormElement of cloneItem.children) {
        this.renderRadioElement(childFormElement, element, fill1, fill2, !!(cloneItem.isRequired && cloneItem.children.filter(x => x.value === 'on').length === 0));
      }
    } else {
      let padding: number = cloneItem.paddingLeft;
      if (cloneItem.id === 'tooltipElement') {
        padding = 0;
      }
      if (cloneItem.elementType === 'label' || cloneItem.elementType === 'hyperlink') {
        const rect = this.svgContext.createRect({
          id: cloneItem.id + '_rect1',
          width: cloneItem.width,
          height: cloneItem.height,
          fill: this.getBackgroundColor(cloneItem, fill1),
          stroke: stroke1
        });

        if (cloneItem.elementType === 'label' && cloneItem.backgroundColor) {
          rect.style.opacity = '1';
        }
        element.appendChild(rect);
        if (cloneItem.elementType === 'label') {
          if (cloneItem.textDirection === TextDirection.RTL) {
            element.setAttribute('direction', 'rtl');
          } else {
            element.setAttribute('direction', 'ltr');
          }
        }
        if (cloneItem.elementType === 'hyperlink') {
          const imageElement: Element = this.svgContext.createImage({
            x: 4,
            width: 16,
            height: 16,
            href: this.hyperlinkIcon,
            preserveAspectRatio: 'xMinYMid meet',
            id: cloneItem.id + '_hyperlinkicon'
          });
          imageElement.setAttribute('y', '0');
          element.appendChild(imageElement);
          cloneItem.linePadding = this.getLinePadding(cloneItem);
        }
      } else {
        element.appendChild(this.svgContext.createRect({
          id: cloneItem.id + '_rect2',
          width: cloneItem.width,
          height: cloneItem.height,
          fill: fill2,
          stroke: stroke2
        }));
        element.appendChild(this.svgContext.createRect({
          id: cloneItem.id + '_rect1',
          width: cloneItem.elementType === 'attachment' || cloneItem.elementType === 'image' || cloneItem.elementType === 'dropdown' ? 4 : padding,
          height: cloneItem.height,
          fill: fill1,
          stroke: stroke1
        }));
        if ((this.pageType === 'SIGN' || this.pageType === 'PREPARE' || (this.pageType === 'VIEW' && this.isPreviewPage)) && cloneItem.elementType === 'dropdown') {
          const imageElement: Element = this.svgContext.createImage({
            x: 4,
            width: 14,
            height: 14,
            href: this.dropdownIcon,
            preserveAspectRatio: 'xMinYMid meet',
            id: cloneItem.id + '_dropdownIcon'
          });
          imageElement.setAttribute('y', '0');
          element.appendChild(imageElement);
          cloneItem.linePadding = this.getLinePadding(cloneItem);
        }
      }
      if (cloneItem.elementType === 'attachment') {
        const imageElement: Element = this.svgContext.createImage({
          x: 4,
          width: 20,
          height: 20,
          href: this.attachmentIcon,
          preserveAspectRatio: 'xMinYMid meet',
          id: cloneItem.id + '_attachmenticon'
        });
        imageElement.setAttribute('y', '4');
        element.appendChild(imageElement);
        cloneItem.linePadding = this.getLinePadding(cloneItem);
      }
      if ((cloneItem.elementType === 'signature' || cloneItem.elementType === 'initial' || cloneItem.elementType === 'image') && cloneItem.value) {
        if (cloneItem.elementType === 'image' && cloneItem.isNewField) {
          padding = 4;
        }
        const imageElement: Element = this.svgContext.createImage({
          x: padding,
          width: cloneItem.width - padding,
          height: cloneItem.height,
          href: cloneItem.value,
          preserveAspectRatio: 'xMinYMid meet',
          id: cloneItem.id + '_image'
        });
        element.appendChild(imageElement);
        cloneItem.linePadding = this.getLinePadding(cloneItem);
      } else {
        this.renderTextElement(cloneItem, padding, element);
      }
    }
    if (this.pageType === 'PREPARE' && cloneItem.tabIndex > 0) {
      this.renderTabIndexElement(cloneItem);
    }
    this.renderSignerNameInHeader(cloneItem, element);
    // To set attributes after rendering the element to set attributes also for their child in case of radio button
    if (this.pageType === 'SIGN' && !cloneItem.isNewField) {
      UtilityMethods.triggerEvent(this.setAccessibilityAttributes, { formElement: cloneItem, domElement: element });
    }
    return element;
  }

  private getDefaultTextValue (formElement: FormElement): string {
    let value: string = formElement.value || formElement.label;
    const elementType: string = formElement.elementType;
    if (elementType === 'hyperlink') {
      value = formElement.label;
    } else if (!formElement.value && elementType === 'datepicker' && formElement.timeFormat && formElement.timeFormat !== 'None') {
      value = formElement.label + ' ' + formElement.timeFormat;
    }
    if (!value) {
      const defaultTextValues = this.defaultTextValues;
      if (elementType === 'signature') {
        return defaultTextValues.signaturePlaceholder;
      } else if (elementType === 'initial') {
        return formElement.width >= 40 ? defaultTextValues.initialPlaceholder : defaultTextValues.initialPlaceholder.substring(0, 2) + '...';
      } else if (elementType === 'textbox') {
        return (this.pageType !== 'SIGN' || formElement.isNewField) ? 'Text' : '';
      } else if (elementType === 'datepicker') {
        return 'DD/MM/YYYY';
      } else if (elementType === 'label') {
        return this.getDefaultTextValueForLabel(formElement);
      } else if (elementType === 'hyperlink') {
        return 'Hyperlink';
      } else if (elementType === 'name') {
        return 'Name';
      } else if (elementType === 'email') {
        return 'Email';
      } else if (elementType === 'dropdown') {
        return defaultTextValues.dropDownPlaceholder;
      } else if (elementType === 'title') {
        return defaultTextValues.titlePlaceholder;
      } else if (elementType === 'company') {
        return defaultTextValues.companyPlaceholder;
      } else if (elementType === 'formula') {
        return this.getDefaultTextValueForFormula(formElement);
      }
    }
    return value;
  }
  public getPageFormElementByFormElement (elementId: string): PageFormElements {
    for (const pageFormElement of this.pageFormElementsList) {
      for (const formElement of pageFormElement.formElements) {
        if (formElement.id === elementId) {
          return pageFormElement;
        }
      }
    }
    return null;
  }
