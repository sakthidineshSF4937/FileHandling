[Category("DeleteDraftsTemplate")]
        //[TestCase(true, false)]
        //[TestCase(false, false)]
        //[TestCase(false, true)]
        public async Task DeleteDraftsTemplate(bool isShared, bool isUnRealtedUser)
        {
            var documentId = Guid.NewGuid().ToString();
            var senderId = Guid.NewGuid().ToString();
            var senderOrgId = Guid.NewGuid().ToString();
            var teamId = Guid.NewGuid().ToString();

            var accessUid = senderId;
            var accessTid = isShared ? teamId : null;
            var recieverOrgId = senderOrgId;
            var recieverId = Guid.NewGuid().ToString();

            var accessDetails = this.GetAccessRights(isTemplate: true, documentID: documentId, senderID: senderId, senderOrgID: senderOrgId, accessUid: accessUid,
                accessTid: accessTid, recieverID: recieverId, recieverOrgId: recieverOrgId);

            var responseTask = Task.FromResult(accessDetails);

            var documentClientMock = new Mock<CosmosClient>();

            Mock<IDocumentAccessRightsService> controllerContextMock = new Mock<IDocumentAccessRightsService>();
            controllerContextMock.Setup(foo => foo.GetAccessRightsDetailsAsync(It.IsAny<IElasticClient>(), It.IsAny<string>(), It.IsAny<string>())).Returns(responseTask);

            string deletedDbId = null;
            string deletedAccessid = null;
            controllerContextMock.Setup(foo => foo.DeleteAccessRightsDetailsAsync(It.IsAny<IElasticClient>(), It.IsAny<string>(), It.IsAny<string>())).Returns(Task.FromResult(true)).Callback((CosmosClient DocumentClient, string documentId, UserDataService userData) =>
            {
                deletedDbId = documentId; deletedAccessid = accessUid;
            });


            var mockBlobUri = new Uri("http://boldsigntest/myaccount/blob");
            Mock<BlobContainerClient> blobMock = new Mock<BlobContainerClient>(mockBlobUri);
            Mock<CloudStorage> cloudStorageMock = new Mock<CloudStorage>();
            string deletedId = string.Empty;

            cloudStorageMock.Setup(x => x.GetContainer(It.IsAny<string>(), It.IsAny<string>())).ReturnsAsync(blobMock.Object).Callback((string documentId) => deletedId = documentId);

            string deletedAccessId = string.Empty;
            var templateService = new TemplateService(this.elasticClient, this.cacheService, teamManagement, contextAccessor, mapper, apiRequestServiceMock.Object, this.documentContentServiceMock.Object);
            var documentService = new DocumentService(controllerContextMock.Object, this.elasticClient, this.userDataService, cloudStorageMock.Object, this.authorizationService, teamManagement, userManagement, decisionTableExecutor, this.documentContentService, this.documentAuditLog, this.cacheService, this.notificationHub, this.emailHandler, this.extendedDocumentDetailsService, this.contextAccessor, this.databaseContext, this.deleteAccountService, this.webhookEventService, this.scheduleJobDetails, apiRequestServiceMock.Object, new Mock<IOrgActivityService>().Object, bulkDocumentAccessServiceMock.Object);
            var templateController = new TemplateController(userDataService, userManagement, templateService, documentService, this.authorizationService, controllerContextMock.Object, notificationHub, null, mapper, teamManagement, requestDetailsService, this.cacheService, apiRequestServiceMock.Object);

            var userId = isUnRealtedUser ? Guid.NewGuid().ToString() : accessDetails.SignerDetails[0].UserId;
            PermissionsList permissionsList = new PermissionsList()
            {
                Allow = new List<ViewPermissionDetails>()
                {
                    new ViewPermissionDetails()
                    {
                        ResourceType = "Template",
                        Scope = Permissions.SpecificResource,
                        Resource = userId,
                        PermissionAccess = new List<PermissionAccess>()
                        {
                            new PermissionAccess()
                            {
                                CanDelete = true,
                                CanWrite = true,
                                CanView = true,
                            }
                        }
                    }
                },
                Deny = new List<ViewPermissionDetails>(),
            };

            var loggerUser = new ClaimsPrincipal(new ClaimsIdentity(new Claim[]
            {
                new Claim("EmailId", "anonymous@syncfusion.com"),
                new Claim("name", "Anonymous"),
               // new Claim("id", userId),
                new Claim("teamid", (isUnRealtedUser ? null : accessDetails.AccessTid) ?? Guid.NewGuid().ToString()),
             //   new Claim("organizationid", accessDetails.SenderOrgid),
                new Claim("SecurityStamp ", Guid.NewGuid().ToString()),
            }, "someAuthTypeName"));

            var queryCollection = new Dictionary<string, StringValues>
            {
                { "documentId", new StringValues(Guid.NewGuid().ToString()) }
            };
            var query = new QueryCollection(queryCollection);
            templateController.ControllerContext.HttpContext = new DefaultHttpContext() { User = loggerUser };
            templateController.ControllerContext.HttpContext.Request.Query = query;

            templateController.ControllerContext.HttpContext.Items.Add(Permissions.PermissionListConst, permissionsList);

            contextAccessor.HttpContext = templateController.ControllerContext.HttpContext;

            var result = await templateController.DeleteDraftsTemplate(new string[1] { documentId }).ConfigureAwait(false);
            if (isUnRealtedUser)
            {
                ClassicAssert.IsInstanceOf<ForbidResult>(result);
            }
            else
            {
                //ClassicAssert.IsInstanceOf<OkObjectResult>(result);
                //blobMock.Verify(x => x.DeleteIfExists());

                ClassicAssert.AreEqual(accessDetails.DocumentId, deletedDbId);
                // ClassicAssert.AreEqual(accessDetails.AccessUid, deletedAccessid);
            }

        }

        [Category("DeleteDraftsTemplate")]
        // [Test]
        public async Task DeleteDraftsTemplatePolicyFailed()
        {
            string rawJson = System.IO.File.ReadAllText(@"template.json");

            List<AccessRightsDetails> accessRightsDetailsList = JsonConvert.DeserializeObject<List<AccessRightsDetails>>(rawJson);


            var accessDetails = accessRightsDetailsList.FirstOrDefault(f => f.DocumentId == "1dff9b4a-323e-49ed-9355-e382770c1876");
            var responseTask = Task.FromResult(accessDetails);
            var documentClientMock = new Mock<CosmosClient>();


            Mock<IDocumentAccessRightsService> controllerContextMock = new Mock<IDocumentAccessRightsService>();
            controllerContextMock.Setup(foo => foo.GetAccessRightsDetailsAsync(It.IsAny<IElasticClient>(), It.IsAny<string>(), It.IsAny<string>())).Returns(responseTask);

            Mock<CloudStorage> cloudStorageMock = new Mock<CloudStorage>();

            string deletedAccessId = string.Empty;
            var templateService = new TemplateService(this.elasticClient, this.cacheService, teamManagement, contextAccessor, mapper, apiRequestServiceMock.Object, this.documentContentServiceMock.Object);
            var documentService = new DocumentService(controllerContextMock.Object, this.elasticClient, this.userDataService, cloudStorageMock.Object, this.authorizationService, teamManagement, userManagement, decisionTableExecutor, this.documentContentService, this.documentAuditLog, this.cacheService, this.notificationHub, this.emailHandler, this.extendedDocumentDetailsService, this.contextAccessor, this.databaseContext, this.deleteAccountService, this.webhookEventService, this.scheduleJobDetails, apiRequestServiceMock.Object, new Mock<IOrgActivityService>().Object, bulkDocumentAccessServiceMock.Object);
            var mockAuthorization = new Mock<IAuthorizationService>();
            mockAuthorization.Setup(x => x.AuthorizeAsync(It.IsAny<ClaimsPrincipal>(), It.IsAny<object>(), It.IsAny<string>())).Returns(Task.FromResult(AuthorizationResult.Failed()));
            var templateController = new TemplateController(userDataService, userManagement, templateService, documentService, mockAuthorization.Object, controllerContextMock.Object, notificationHub, null, mapper, teamManagement, requestDetailsService, this.cacheService, apiRequestServiceMock.Object);
            Dictionary<string, StringValues> queryCollection = new Dictionary<string, StringValues>();
            queryCollection["documentid"] = new StringValues(documentId);
            QueryCollection query = new QueryCollection(queryCollection);
            templateController.ControllerContext.HttpContext = new DefaultHttpContext() { User = user };
            templateController.ControllerContext.HttpContext.Request.Query = query;
            contextAccessor.HttpContext = templateController.ControllerContext.HttpContext;
            var result = await templateController.DeleteDraftsTemplate(new string[1] { "1dff9b4a-323e-49ed-9355-e382770c1876" }).ConfigureAwait(false);

            ClassicAssert.IsInstanceOf<ForbidResult>(result);

        }

        [Category("DeleteDraftsTemplate")]
        //  [Test]
        public async Task DeleteDraftsTemplateShouldReturnBadRequest()
        {
            string rawJson = System.IO.File.ReadAllText(@"template.json");

            List<AccessRightsDetails> accessRightsDetailsList = JsonConvert.DeserializeObject<List<AccessRightsDetails>>(rawJson);


            var accessDetails = accessRightsDetailsList.FirstOrDefault(f => f.DocumentId == "1dff9b4a-323e-49ed-9355-e382770c1876");
            var responseTask = Task.FromResult(accessDetails);
            var documentClientMock = new Mock<CosmosClient>();


            Mock<IDocumentAccessRightsService> controllerContextMock = new Mock<IDocumentAccessRightsService>();

            Mock<CloudStorage> cloudStorageMock = new Mock<CloudStorage>();

            string deletedAccessId = string.Empty;
            var templateService = new TemplateService(this.elasticClient, this.cacheService, teamManagement, contextAccessor, mapper, apiRequestServiceMock.Object, this.documentContentServiceMock.Object);
            var documentService = new DocumentService(controllerContextMock.Object, this.elasticClient, this.userDataService, cloudStorageMock.Object, this.authorizationService, teamManagement, userManagement, decisionTableExecutor, this.documentContentService, this.documentAuditLog, this.cacheService, this.notificationHub, this.emailHandler, this.extendedDocumentDetailsService, this.contextAccessor, this.databaseContext, this.deleteAccountService, this.webhookEventService, this.scheduleJobDetails, apiRequestServiceMock.Object, new Mock<IOrgActivityService>().Object, bulkDocumentAccessServiceMock.Object);
            var mockAuthorization = new Mock<IAuthorizationService>();
            mockAuthorization.Setup(x => x.AuthorizeAsync(It.IsAny<ClaimsPrincipal>(), It.IsAny<object>(), It.IsAny<string>())).Returns(Task.FromResult(AuthorizationResult.Failed()));
            var templateController = new TemplateController(userDataService, userManagement, templateService, documentService, mockAuthorization.Object, controllerContextMock.Object, notificationHub, null, mapper, teamManagement, requestDetailsService, this.cacheService, apiRequestServiceMock.Object);
            templateController.ControllerContext.HttpContext = new DefaultHttpContext() { User = user };
            var result = await templateController.DeleteDraftsTemplate(new string[1] { "1dff9b4a-323e-49ed-9355-e382770c1876" }).ConfigureAwait(false);
            ClassicAssert.IsInstanceOf<BadRequestObjectResult>(result);
        }

        public async Task<Mock<IUserManagement>> GetUserManagementMock()
        {
            var userManagementMock = new Mock<IUserManagement>();
            var result = await this.userManagement.GetUserList(this.userDataService, 1, 30).ConfigureAwait(false);
            result.UserInfoCollection.UserDetail = result.UserInfoCollection.UserDetail.Where(a => a.EmailVerified && a.IsActive).ToList();
            var responseTask = Task.FromResult(result);
            userManagementMock.Setup(x => x.GetUserList(It.IsAny<UserDataService>(), It.IsAny<int>(), It.IsAny<int>(), It.IsAny<string>(), It.IsAny<string[]>())).Returns((Task<UsersApiResponse>)responseTask);


            return userManagementMock;

        }
   /// <summary>
    /// Delete multiple templates for the given template ID.
    /// </summary>
    /// <param name="templateId">Array of template document ID.</param>
    /// <returns>Returns action result.</returns>
    /// Policy is consumed internally.
    [HttpDelete]
    [Authorize]
    [PolicyValidation(PolicyStatus = PolicyStatus.Internally)]
    public async Task<IActionResult> DeleteTemplates([GuidArray(ErrorMessage = ValidationMessages.ValidDocumentId)][Required(ErrorMessage = ValidationMessages.Required)]string[] templateId)
    {
      try
      {
        if (templateId == null || templateId.Contains(string.Empty) || templateId?.Length == 0)
        {
          return this.BadRequest("Failure");
        }

        var tuple = await PermissionAuthorizationHandler.GetResourceOwnerAllowedGroups(this.userDataService, this.HttpContext, Permissions.TemplateResources, this.cacheService, this.teamManagement, this.apiRequestService).ConfigureAwait(false);

        Dictionary<string, Task<bool?>> deleteTasks = new Dictionary<string, Task<bool?>>();
        var permissionList = await new AccessRightsReader(this.HttpContext, null, this.apiRequestService).GetPermissionsListAsync(this.userDataService, this.cacheService).ConfigureAwait(false);

        var groupData = await this.teamManagement.GetTeamListAsync(this.userDataService).ConfigureAwait(false);

        this.HttpContext.Items.TryAdd(DocumentDetailsReader.TeamListCache, groupData);

        foreach (var id in templateId)
        {
          deleteTasks.Add(id, this.templateService.DeleteTemplatesItem(id, this.User, this.authorizationService, this.documentService, this.userDataService, permissionList, tuple.Item1));
        }

        await Task.WhenAll(deleteTasks.Select(v => v.Value)).ConfigureAwait(false);
        string[] successId = deleteTasks.Where(x => x.Value.Result == true).Select(x => x.Key).ToArray();

        if (deleteTasks.Any(x => x.Value.Result == null))
        {
          return this.Forbid();
        }

        return deleteTasks.All(x => x.Value.Result == true) ? this.Ok("Success") : (IActionResult)this.BadRequest(ExceptionMessages.DeleteTemplateDrafts);
      }
      catch (CosmosException ex) when (ex.StatusCode.ToString().ToUpperInvariant() == this.documentService.DocumentClientNotFoundException)
      {
        return this.BadRequest("Failure");
      }
    }

        [Category("DeleteDraftsTemplate")]
        [Test]
        public async Task DeleteDraftsTemplateEmptyIdException()
        {
            var templateService = new TemplateService(this.elasticClient, this.cacheService, teamManagement, contextAccessor, mapper, apiRequestServiceMock.Object, this.documentContentServiceMock.Object);
            var templateController = new TemplateController(userDataService, userManagement, templateService, documentService, authorizationService, accessRightsServices, notificationHub, null, mapper, teamManagement, requestDetailsService, this.cacheService, apiRequestServiceMock.Object);
            var result = await templateController.DeleteDraftsTemplate(new string[0]).ConfigureAwait(false);
            ClassicAssert.IsInstanceOf<BadRequestObjectResult>(result);
        }
