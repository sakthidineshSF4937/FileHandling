<template>
<div>
  <ejs-dropdownbutton
      v-if="!showConfirmDialog"
      class="bs-template-merge"
      id="merge_button"
      :items="mergeOptions"
      :content="mergeAndUse"
      :open="setPopoverPosition"
      @select="mergeOptionsSelect"
    ></ejs-dropdownbutton>
</div>
</template>
<script>
import { Component, Vue } from "vue-property-decorator";

@Component
export default class MergeTemplateDropDown extends Vue {
  mergeOptions = [
    { text: "Create document", id: "mergeDoc" },
    { text: "Create bulk link", id: "mergeLink" },
    { text: "Delete", id: "mergedelete" },
  ];

  mergeAndUse = "Merge & Use";

  mergeOptionsSelect (args) {
    if (args.item.id === "mergeDoc") {
      this.$nuxt.$emit("mergeTemplate", "document");
    } else if (args.item.id === "mergedelete") {
      this.$nuxt.$emit("templateDeleteItemClick", "openConfirmDeleteDialog");// calls the created method in the ts file
    } else {
      this.$nuxt.$emit("mergeTemplate", "bulklink");
    }
  }

  setPopoverPosition () {
    const dropdown = document.querySelector("#merge_button");
    const popover = document.querySelector("#merge_button-popup");
    if (dropdown && popover) {
      popover.style.left = dropdown.getBoundingClientRect().left + "px";
    }
  }
}
</script>

<style>
#merge_button {
  border: solid 1px #0F43B3;
  color: #ffffff;
  padding: 4px 12px;
  background-color: #0565ff;
  border-radius: 4px;
  width: 148px;
  height: 32px;
}
#merge_button:hover {
  background-color: #2e7eff;
}

.bs-template-merge:before {
  content: '\e3b4';
  font-family: Bold Sign;
  vertical-align: middle;
  font-weight: 500;
  padding-right: 10px;
}

#merge_button span.e-btn-icon.e-icons.e-icon-right.e-caret {
  display: inline-block;
  font-weight: 500;
  color: #ffffff;
  margin: 0;
  padding-left: 7px;
}

#merge_button-popup ul {
  min-width: 148px;
}
</style>
: Property or method "showConfirmDialog" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.

found in

---> <MergeTemplateDropDown> at ClientApp/components/templates/MergeTemplateDropDown.vue
       <ToolbarComponent>
         <TemplateComponent> at ClientApp/pages/templates/_.vue
           <Nuxt>
             <DefaultPageComponent> at ClientApp/layouts/default.vue
               <Root>
