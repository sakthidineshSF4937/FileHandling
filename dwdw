    public async Task<AccessRightsDetails> GetAccessRights(PermissionsList permissionsList)
        {
            if (string.IsNullOrEmpty(this.documentId)
                || string.IsNullOrEmpty(this.userDataService.Id)
                || string.IsNullOrEmpty(this.userDataService.OrganizationId))
            {
                return null;
            }

            // this.AccessRightsDetails = GetTemplateAccessRightsCache(this.context);
            var accessRightsCollection = await this.accessRightsService
                .GetTemplatesByDocumentId(this.elasticClient, this.userDataService, this.documentId)
                .ConfigureAwait(false);

            var teamIds = permissionsList?.Allow
                    .Where(x => x.ResourceType == Permissions.TemplateResources
                        && x.Scope == Permissions.ResourcesInCollection)
                    .Where(x => x.PermissionAccess.IsExists(Permissions.ViewAccessType, true))
                    .Select(x => x.Resource)
                    .ToList()
                ?? new List<string>();

            var deniedTeams = permissionsList?.Deny
                    .Where(
                        x => x.ResourceType == Permissions.TemplateResources
                            && x.Scope == Permissions.ResourcesInCollection)
                    .Where(x => x.PermissionAccess.IsExists(Permissions.ViewAccessType, false))
                    .Select(x => x.Resource)
                    .ToList()
                ?? new List<string>();

            var isAccountAdmin = permissionsList?.Allow
                .Any(x => x.Scope == Permissions.AllResources && x.ResourceType == Permissions.TemplateResources
                        && x.PermissionAccess.IsExists(Permissions.ViewAccessType, true))
                ?? false;

            teamIds = deniedTeams.Count == 0 ? teamIds : teamIds.Where(x => !deniedTeams.Any(y => y.IsEqual(x))).ToList();

            // Decision to take which access rights to process for this user from these priority
            // - Original template, Team owner access to the original template document
            // - Shared template, AccessTid matches with user's team id
            // - Shared template, AccessTid matches with user's team permissions (including custom team permission)
            // - Own template or access template as account admin
            // - If none of above matched, take default or first template as policy will decide to allow or not
            var accessRights =
                accessRightsCollection.FirstOrDefault(x =>
                    x.AccessTid == null &&
                    ((isAccountAdmin && !deniedTeams.Contains(x.SenderDetail.TeamId)) ||
                     teamIds.Any(y => y.IsEqual(x.SenderDetail.TeamId))))
                ?? accessRightsCollection.FirstOrDefault(x => x.AccessTid != null && x.AccessTid == this.userDataService.TeamId)
                ?? accessRightsCollection.FirstOrDefault(x => teamIds.Contains(x.AccessTid))
                ?? accessRightsCollection.FirstOrDefault(x =>
                    x.AccessTid == "*" && x.SenderDetail.OrganizationId == this.userDataService.OrganizationId)
                ?? accessRightsCollection.FirstOrDefault(
                    x => x.AccessTid == null
                        && (x.SenderDetail.AccessUid == this.userDataService.Id
                            || x.SenderDetail.TeamId == this.userDataService.TeamId
                            || x.SenderDetail.OrganizationId == this.userDataService.OrganizationId))
                ?? accessRightsCollection.FirstOrDefault();

            this.AccessRightsDetails = accessRights;

            lock (this.context)
            {
                this.context.Items.Remove(AccessRightsData);

               
                if (!this.context.Items.ContainsKey(StringValues.MergeTemplateList))
                {
                    this.context.Items.Add(AccessRightsData, this.AccessRightsDetails);
                }
            }

            return this.AccessRightsDetails;
        }  
this.documentID has aba84214-7fd9-4c4c-9ffe-7be629a3c371,342accc5-7931-4682-91bf-dfe0d4b8552c has two id with comma separate i need to rewrite pass id in each time in loop and also check some thime document id
 will not have , beacuse of single id that time we cant split
  

