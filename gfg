       [Test]
        public async Task TextTagonWebApp_ExtractAndStorePdfFormFields(){
               var documents = new DocumentUploadDetails()
                {
                    ParentDocumentId = "c8a6269e-f7ed-4969-8ea6-3eb0eae8c229",
                    DocumentClientId = "AozuR",
                    DocumentName = "TextTags-signer2.pdf",
                    ContentType = "application/pdf",
                    UploadRequestType = UploadRequestType.Document,
                    DocumentArray = File.ReadAllBytes(DataFile.PdfFilePath3)
                };

          List<BoldSign.ApiManagement.Models.TextTags.Models.TextTagDefinition> combinedTags = new List<BoldSign.ApiManagement.Models.TextTags.Models.TextTagDefinition>();
          int pageIndex = 1;
          using DocumentTextExtractor documentTextExtractor = new DocumentTextExtractor(documents.DocumentArray);
          var documentTags = documentTextExtractor.ExtractTextTags(null, ref pageIndex);
          combinedTags.AddRange(documentTags);
          using var loadedDocument = new PdfLoadedDocument(documents.DocumentArray);
           List<PageFormElements> pageFormElements = new List<PageFormElements>();
        List<FormElement> formElements = new List<FormElement>();
        var finalFormElement = new PageFormElements();
        if (documentTags!=null)
        {
        foreach (var tagtexts in combinedTags.ToList())
          {
            finalFormElement = repository.PrepareFormField(loadedDocument, tagtexts, tagtexts.Bounds, tagtexts.Type);
            pageFormElements.Add(finalFormElement);
         }
        }
         if (pageFormElements != null)
        {
           var group = pageFormElements.GroupBy(x => x.PageIndex).Select(x => x).ToList();
           List<PageFormElements> newPageFormElements = new List<PageFormElements>();
           for (int i = 0; i < group.Count; i++)
          {
            var checks = group[i].SelectMany(x => x.FormElements).ToList();
            PageFormElements formElement = new PageFormElements();
            formElement.PageIndex = group[i].Key;
            formElement.FormElements = checks.ToArray();
            newPageFormElements.Add(formElement);
          }

           if (newPageFormElements != null && newPageFormElements.Count > 0)
          {
          BlobClient blobClientDocument = null;
          BlobContainerClient cloudBlobContainer = await this.cloudStorage.GetContainer(documents.ParentDocumentId, commonOrganizationId);
          if (!await cloudBlobContainer.ExistsAsync(CancellationToken.None).ConfigureAwait(false))
            {
             var parentContainer = await this.cloudStorage.CreateContainer(documents.ParentDocumentId, commonOrganizationId);
            }
   
           var childId="";
           if (string.IsNullOrEmpty(childId))
            {
              blobClientDocument = cloudBlobContainer.GetBlobClient($"{DbConstants.DocumentPdfFields}");
            }
            else
            {
              blobClientDocument = cloudBlobContainer.GetBlobClient($"{childId}{DbConstants.DocumentPdfFields}");
            }

            await this.cloudStorage.UploadFromByteArrayAsync(blobClientDocument, BinarySerializer.Serialize<List<PageFormElements>>(newPageFormElements), 0, true).ConfigureAwait(false);
           }
         ClassicAssert.IsNotNull(newPageFormElements);
         ClassicAssert.IsTrue(newPageFormElements.Count > 0);
         ClassicAssert.AreEqual(group.Count, newPageFormElements.Count);
         ClassicAssert.IsTrue(newPageFormElements.All(p => p.FormElements.Length > 0));
         }   

        }
       [Test]
        public async Task TextTagonWebApp_RetrievePdfFormFields_FromController(){
               var documents = new DocumentUploadDetails()
                {
                    ParentDocumentId = "c8a6269e-f7ed-4969-8ea6-3eb0eae8c229",
                    DocumentClientId = "AozuR",
                    DocumentName = "TextTags-signer2.pdf",
                    ContentType = "application/pdf",
                    UploadRequestType = UploadRequestType.Document,
                    DocumentArray = File.ReadAllBytes(DataFile.PdfFilePath3)
                };

          List<BoldSign.ApiManagement.Models.TextTags.Models.TextTagDefinition> combinedTags = new List<BoldSign.ApiManagement.Models.TextTags.Models.TextTagDefinition>();
          int pageIndex = 1;
          using DocumentTextExtractor documentTextExtractor = new DocumentTextExtractor(documents.DocumentArray);
          var documentTags = documentTextExtractor.ExtractTextTags(null, ref pageIndex);
          combinedTags.AddRange(documentTags);
          using var loadedDocument = new PdfLoadedDocument(documents.DocumentArray);
           List<PageFormElements> pageFormElements = new List<PageFormElements>();
        List<FormElement> formElements = new List<FormElement>();
        var finalFormElement = new PageFormElements();
        if (documentTags!=null)
        {
        foreach (var tagtexts in combinedTags.ToList())
          {
            finalFormElement = repository.PrepareFormField(loadedDocument, tagtexts, tagtexts.Bounds, tagtexts.Type);
            pageFormElements.Add(finalFormElement);
         }
        }
         if (pageFormElements != null)
        {
           var group = pageFormElements.GroupBy(x => x.PageIndex).Select(x => x).ToList();
           List<PageFormElements> newPageFormElements = new List<PageFormElements>();
           for (int i = 0; i < group.Count; i++)
          {
            var checks = group[i].SelectMany(x => x.FormElements).ToList();
            PageFormElements formElement = new PageFormElements();
            formElement.PageIndex = group[i].Key;
            formElement.FormElements = checks.ToArray();
            newPageFormElements.Add(formElement);
          }

           if (newPageFormElements != null && newPageFormElements.Count > 0)
          {
          BlobClient blobClientDocument = null;
          BlobContainerClient cloudBlobContainer = await this.cloudStorage.GetContainer(documents.ParentDocumentId, commonOrganizationId);
          if (!await cloudBlobContainer.ExistsAsync(CancellationToken.None).ConfigureAwait(false))
            {
             var parentContainer = await this.cloudStorage.CreateContainer(documents.ParentDocumentId, commonOrganizationId);
            }
   
           var childId="";
           if (string.IsNullOrEmpty(childId))
            {
              blobClientDocument = cloudBlobContainer.GetBlobClient($"{DbConstants.DocumentPdfFields}");
            }
            else
            {
              blobClientDocument = cloudBlobContainer.GetBlobClient($"{childId}{DbConstants.DocumentPdfFields}");
            }

            await this.cloudStorage.UploadFromByteArrayAsync(blobClientDocument, BinarySerializer.Serialize<List<PageFormElements>>(newPageFormElements), 0, true).ConfigureAwait(false);
           }
           var controller = new DocumentManipulatorController(repository, authorizationService, documentUploadStatusService, this.httpClientFactory, new Mock<IExportCsvService>().Object, downloadAuditTrailService, documentContentService, elasticClient, accessRightsService, accessRightsDetailsService);
            SetUserAgent(controller);    
            var result = (await controller.GetPreDocumentProperties(documents.ParentDocumentId).ConfigureAwait(false) as OkObjectResult).Value as PdfFields;
            var result1 = (await controller.GetPdfFormFields(documents.ParentDocumentId, commonOrganizationId).ConfigureAwait(false) as OkObjectResult).Value as List<PageFormElements>;
            ClassicAssert.IsTrue(result.HasPdfFormFields);
            ClassicAssert.AreEqual(result1.Count, 2);
            ClassicAssert.AreEqual(result1[0].FormElements.Length, 2);
            ClassicAssert.AreEqual(result1[0].PageIndex, 1);
            ClassicAssert.AreEqual(result1[1].FormElements.Length, 2);
            ClassicAssert.AreEqual(result1[1].PageIndex, 2);
         }   

        }

