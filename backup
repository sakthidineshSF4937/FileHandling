describe('Delete template', { testIsolation: false }, () => {
  before(() => {
    cy.login1();
  });

  beforeEach(() => {
    cy.intercept('POST', '/Template/GetTemplates').as('gettemplates');
  });

  it('Template count before Delete', () => {
    cy.visit('http://localhost:63043/templates/mytemplates/');
    cy.wait('@gettemplates').then((xhr) => {
      // cy.log('Response Body:', JSON.stringify(xhr.response.body));
      // cy.log('Template count:', xhr.response.body.count);
      const originalCount = xhr.response.body.count;
      cy.log('Template count Before Deletion:', originalCount);
      expect(originalCount).to.be.a('number');
      expect(originalCount).to.be.at.least(0);
      cy.wrap(originalCount).as('originalCount');
    });
  });

  it('d', () => {
    cy.visit('http://localhost:63043/templates/mytemplates/');
    cy.wait('@gettemplates').then(() => {
      cy.get('#temp-grid', { timeout: 5000 })
        .find('[aria-rowindex="0"]')
        .trigger('mouseover')
        .then(docs => {
          docs[0].cells[0].children[0].style.display = 'block';
          cy.get('.e-checkselect').eq(0).click({ force: true }).should('be.checked');
        });
      cy.get('#temp-grid')
        .find('[aria-rowindex="1"]')
        .trigger('mouseover')
        .then(docs => {
          docs[0].cells[0].children[0].style.display = 'block';
          cy.get('.e-checkselect').eq(1).click({ force: true });
          cy.get('.e-checkselect').eq(1).should('be.checked');
        });
      cy.get('#merge_button').click({ force: true });
      cy.get('#merge_button-popup').within(() => {
        cy.get('#mergeDoc').should('be.visible');
        cy.get('#mergeLink').should('be.visible');
        cy.get('#mergedelete').should('be.visible');
      });
      cy.get('#mergedelete').click({ force: true });
      cy.get('.e-control').contains('Yes, delete').click();
    });

    it('Check for toast', () => {
      // eslint-disable-next-line cypress/no-unnecessary-waiting
      cy.wait(4000);
      cy.get('.e-toast-content').should('contain.text', 'Template(s) deleted forever.');
    });

    it('Check for notification', () => {
      cy.get('#notificationbar').click({ force: true });
      cy.get('#notify-sidebar')
        .find('.notify-message-item')
        .should('contains.text', 'Mark all as read');
      cy.get('#notify-sidebar')
        .find('.notification-list-header')
        .find('.close-icon')
        .click();
    });
  });

  it('Template count after Delete', () => {
    cy.visit('http://localhost:63043/templates/mytemplates/');

    cy.wait('@gettemplates').then((xhr) => {
      // Log the full response body to inspect its structure
      // cy.log('Response Body:', JSON.stringify(xhr.response.body));
      // // Log the count if it exists
      // cy.log('Template count:', xhr.response.body.count);
      const updatedCount = xhr.response.body.count;
      // Log the updated count after deletion
      cy.log('After Deletion Template count:', updatedCount);
      // Assert that the updated count is a number and at least 0
      expect(updatedCount).to.be.a('number');
      expect(updatedCount).to.be.at.least(0);
      // Compare the updated count with the original count
      cy.get('@originalCount').should('be.greaterThan', updatedCount);
    });
  });
});
