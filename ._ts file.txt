._ts file
export default class TemplateComponent extends Vue {
templateIds = [];
templateLength=this.templateIds.length;

}
Merge template dropdown.vue file
<template>
 <ejs-dropdownbutton v-if="!showConfirmDialog"
    class="bs-template-merge"
    id="merge_button"
    :items="mergeOptions"
    :content="mergeAndUse"
    :open="setPopoverPosition"
    @select="mergeOptionsSelect"
  ></ejs-dropdownbutton>  
  <div v-else class="overlay">
  <div class="e-control e-dialog e-lib confirm-delete-template-dialog e-dlg-modal e-popup e-popup-open centered-dialog" role="dialog" style="max-height: 348px; z-index: 2147483647; width: 470px;" aria-describedby="_dialog-content" aria-modal="true" tabindex="-1" >
    <div class="e-dlg-content" id="_dialog-content">
      <div class="dialog-header" style="display: flex;justify-content: space-between;">
        <div class="warning-gradient-bg"></div>
        <div class="text-content-style">
        <div>{{data.customPermission.dialogConfirmText }}</div> 
        <div>{{ data.customPermission.dialogConfirmSubText }}</div>
        </div>
      </div>
      <div class="dialog-footer">
        <button type="button" class="e-control e-btn e-lib e-flat" v-on:click="onCancelDelete">{{ data.customPermission.dialogCancel }}</button>


<template>
 <ejs-dropdownbutton v-if="!showConfirmDialog"
    class="bs-template-merge"
    id="merge_button"
    :items="mergeOptions"
    :content="mergeAndUse"
    :open="setPopoverPosition"
    @select="mergeOptionsSelect"
  ></ejs-dropdownbutton>  

  <!-- <div class="e-control e-dialog e-lib confirm-delete-template-dialog e-dlg-modal e-popup e-popup-open centered-dialog" role="dialog" style="max-height: 348px; z-index: 2147483647; width: 470px;" aria-describedby="_dialog-content" aria-modal="true" tabindex="-1" >
    <div class="e-dlg-content" id="_dialog-content">
      <div class="dialog-header" style="display: flex;justify-content: space-between;">
        <div class="warning-gradient-bg"></div>
        <div class="text-content-style">
        <div>{{data.customPermission.dialogConfirmText }}</div> 
       <div> {{ count }}  </div>
        <div>{{ data.customPermission.dialogConfirmSubText }}</div>
        </div>
      </div>
      <div class="dialog-footer">
        <button type="button" class="e-control e-btn e-lib e-flat" v-on:click="onCancelDelete">{{ data.customPermission.dialogCancel }}</button>
        <button type="button" class="e-control e-btn e-lib e-danger e-flat" v-on:click="onConfirmDelete">{{ data.customPermission.dialogConfirm }}</button>
      </div>
    </div>
  </div> -->
  <ejs-dialog v-else
      ref="modalDialog"
      :isModal="true"
      width="450px"
      >
      <div>
        <div class="flex items-start pb-4 pt-4 pl-3 pr-8">
          <div class="warning-gradient-bg"></div>
          <div class="text-content-style">{{ $nuxt.$t('templates.confirmPermanentDelete') }}</div>
          <!-- <div>{{Count}}</div> -->
           <div>{{ templateLength}}</div>
        </div>
        <div class="dialog-footer">
        <button type="button" class="e-control e-btn e-lib e-flat" v-on:click="onCancelDelete">{{ data.customPermission.dialogCancel }}</button>
        <button type="button" class="e-control e-btn e-lib e-danger e-flat" v-on:click="onConfirmDelete">{{ data.customPermission.dialogConfirm }}</button>
      </div>
      </div>
    </ejs-dialog>

</template>


<script lang="ts">
import { Component, Prop, Vue } from "vue-property-decorator";
import ConfirmDeleteDialog from "../webhooks/confirm-delete-dialog.vue";
import dailogtext from "../../../ClientApp/locales/en.json";
import TemplateComponent from "../../../ClientApp/pages/templates/_"
@Component
({
  components:{
    ConfirmDeleteDialog,TemplateComponent
  }
})
@Component
export default class MergeTemplateDropDown extends Vue {
  data=dailogtext;
  // Count=TemplateComponent.prototype.count;
  // templatelength=[...TemplateComponent]
//     templatelength=templateIds.prototype.templateIds.length;
  // get templateLength(){
  //   return templateIds.prototype.templateIds.length
  // }
   selectdocumentcount=0;
   templateLength:number=0;
showConfirmDialog:boolean = false;

updateTemplateLength(length){
  console.log("helloworld")
  console.log(length)
 this.templateLength=length;
}
  mergeOptions = [
    { text: 'Create document', id: 'mergeDoc' },
    { text: 'Create bulk link', id: 'mergeLink' },
    {text:'Delete',id:'mergedelete'}
  ];
        <button type="button" class="e-control e-btn e-lib e-danger e-flat" v-on:click="onConfirmDelete">{{ data.customPermission.dialogConfirm }}</button>
      </div>
    </div>
  </div>
  </div>
</template>

<script lang="ts">
import { Component, Prop, Vue } from "vue-property-decorator";
import ConfirmDeleteDialog from "../webhooks/confirm-delete-dialog.vue";
import dailogtext from "../../../ClientApp/locales/en.json";
// import * as v from "../../../ClientApp/pages/templates/_";

@Component
({
  components:{
    ConfirmDeleteDialog
  }
})
@Component
export default class MergeTemplateDropDown extends Vue {
  data=dailogtext;
//  templateLength=v.default.prototype.templateLength;
//  templateLength=templateLength;
showConfirmDialog:boolean = false;
  mergeOptions = [
    { text: 'Create document', id: 'mergeDoc' },
    { text: 'Create bulk link', id: 'mergeLink' },
    {text:'Delete',id:'mergedelete'}
  ];

  mergeAndUse = 'Merge & Use';

  mergeOptionsSelect (args) {
    if (args.item.id === 'mergeDoc') {
      this.$nuxt.$emit('mergeTemplate', 'document');
    }
    else if(args.item.id ==='mergedelete'){
      this.showConfirmDialog=true;
      console.log('mergedelete')
      // this.$nuxt.$emit('deleteTemplate', 'document');
    }
    else {
      this.$nuxt.$emit('mergeTemplate', 'bulklink');
    }
  }
  onConfirmDelete(){
    console.log("confirmed delete");
    this.$nuxt.$emit('deleteTemplate', 'document');
    alert("template deleted successfully")
    this.showConfirmDialog=false;
  }
  onCancelDelete(){
    console.log("canceled delete");
    this.showConfirmDialog=false;
    
  }
  setPopoverPosition () {
    const dropdown = document.querySelector('#merge_button') as HTMLElement;
    const popover = document.querySelector('#merge_button-popup') as HTMLElement;
    if (dropdown && popover) {
      popover.style.left = dropdown.getBoundingClientRect().left + "px";
    }
  }
}
</script>

<style>
#merge_button {
  border: solid 1px #0F43B3;
  color: #ffffff;
  padding: 4px 12px;
  background-color: #0565ff;
  border-radius: 4px;
  width: 148px;
  height: 32px;
}
.overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100%;
  background-color: rgba(45, 55, 72, 0.4);
  opacity: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 2147483647; /* Ensure it's above other content */
} 

.dialog-box {
 max-width: 470px; /* Same width as specified for the dialog */
}
.centered-dialog {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  padding: 20px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  background-color: #fff;
  border-radius: 8px;
}

.dialog-header {
  margin-bottom: 20px;
  text-align: center;
}

.dialog-footer {
  display: flex;
  justify-content: space-between;
  padding-top: 10px;
}
 /* .overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(45, 55, 72, 0.4);
  opacity: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 2147483647; /* Ensure it's above other content */
/* }  */ 
#merge_button:hover {
  background-color: #2e7eff;
}

.bs-template-merge:before {
  content: '\e3b4';
  font-family: Bold Sign;
  vertical-align: middle;
  font-weight: 500;
  padding-right: 10px;
}

#merge_button span.e-btn-icon.e-icons.e-icon-right.e-caret {
  display: inline-block;
  font-weight: 500;
  color: #ffffff;
  margin: 0;
  padding-left: 7px;
}

#merge_button-popup ul {
  min-width: 148px;
}
</style>



    deleteTemplate() {
      for (let index = 0; index < this.templateIds.length; index++) {
        const templateId = this.templateIds[index];
        this.$nuxt.$api.template.deleteTemplate(templateId).then(data => {
          console.log(`Deleted: ${templateId}`);
        })
          .catch(error => {
            console.log(`Not Deleted: ${templateId}`);
          });
        }

background-color: rgba(45, 55, 72, 0.4);
opacity: 1; deleteYesBtn () {
      this.$nuxt.$spinner.show(true);
      const gridObj = this.$refs.grid1.ej2Instances;
      const toastObj = this.$nuxt.$store.state.toastObj;
      const selectedRecords: any[] = gridObj.getSelectedRecords();
      const docID: string = selectedRecords[0].documentId;
      const documentName = selectedRecords[0].messageTitle;
      const path = '';
      const options = {};
      const ids: any[] = [];
      this.onNewNotificationReceived();
      this.$data.deleteDialogVisible = false;
      const successContent = this.$nuxt.$t('toast.deleteTempPermanentSuccessToastTittle', {
        documentName: documentName,
      });
      const failureContent = this.$nuxt.$t('toast.deleteTempPermanentFailureToastTittle', {
        documentName: documentName,
      });
      selectedRecords.forEach(item => {
        item && item.documentId ? ids.push(item.documentId) : null;
      });
      if (isStatusMatch(this.$nuxt.$route, ['drafts'])) {
        this.$api.template
          .deleteDraftTemplate(ids)
          .then(() => {
            this.selectedDocumentsCount = 0;
            this.checkState = false;
            this.hideSelectedItems(selectedRecords);
            this.scheduleGridRefresh();
            this.$nuxt.$toastService.show(successContent, 'bs_toast_success', 'bs_delete_toast');
            this.$nuxt.$spinner.show(false);
          })
          .catch(() => {
            this.$nuxt.$toastService.show(failureContent, 'bs_toast_failure', 'bs_delete_toast');
            this.$nuxt.$spinner.show(false);
          });
      } else {
        this.$api.template
          .deleteTemplate(docID)
          .then(() => {
            this.hideSelectedItems(selectedRecords);
            this.scheduleGridRefresh();
            this.$nuxt.$toastService.show(successContent, 'bs_toast_success', 'bs_delete_toast');
            this.$nuxt.$spinner.show(false);
          })
          .catch(() => {
            this.$nuxt.$toastService.show(failureContent, 'bs_toast_failure', 'bs_delete_toast');
            this.$nuxt.$spinner.show(false);
          });
      }

      this.isToolbar = false;
    }

    deleteNoBtn () {
      this.clearSelection();
      this.$data.deleteDialogVisible = false;
    }

    hideSelectedItems (selectedRecords) {
      if (!selectedRecords) {
        return;
      }
      const gridData = this.$refs.grid1.getCurrentViewRecords() as any;
      const gridRows = this.$refs.grid1.getRows();
      const rowElements = selectedRecords.map(x => gridData.findIndex(y => y.documentId === x.documentId)).map(x => gridRows[x]);
      rowElements.forEach((x: HTMLElement) => (x ? (x.style.display = 'none') : null));
    }



<template>
 <ejs-dropdownbutton v-if="!showConfirmDialog"
    class="bs-template-merge"
    id="merge_button"
    :items="mergeOptions"
    :content="mergeAndUse"
    :open="setPopoverPosition"
    @select="mergeOptionsSelect"
  ></ejs-dropdownbutton>  

  <!-- <div class="e-control e-dialog e-lib confirm-delete-template-dialog e-dlg-modal e-popup e-popup-open centered-dialog" role="dialog" style="max-height: 348px; z-index: 2147483647; width: 470px;" aria-describedby="_dialog-content" aria-modal="true" tabindex="-1" >
    <div class="e-dlg-content" id="_dialog-content">
      <div class="dialog-header" style="display: flex;justify-content: space-between;">
        <div class="warning-gradient-bg"></div>
        <div class="text-content-style">
        <div>{{data.customPermission.dialogConfirmText }}</div> 
       <div> {{ count }}  </div>
        <div>{{ data.customPermission.dialogConfirmSubText }}</div>
        </div>
      </div>
      <div class="dialog-footer">
        <button type="button" class="e-control e-btn e-lib e-flat" v-on:click="onCancelDelete">{{ data.customPermission.dialogCancel }}</button>
        <button type="button" class="e-control e-btn e-lib e-danger e-flat" v-on:click="onConfirmDelete">{{ data.customPermission.dialogConfirm }}</button>
      </div>
    </div>
  </div> -->
  <ejs-dialog v-else
      ref="modalDialog"
      :isModal="true"
      width="450px"
      >
      <div>
        <div class="flex items-start pb-4 pt-4 pl-3 pr-8">
          <div class="warning-gradient-bg"></div>
          <div class="text-content-style">{{ $nuxt.$t('templates.confirmPermanentDelete') }}</div>
          <!-- <div>{{Count}}</div> -->
        </div>
        <div class="dialog-footer">
        <button type="button" class="e-control e-btn e-lib e-flat" v-on:click="onCancelDelete">{{ data.customPermission.dialogCancel }}</button>
        <button type="button" class="e-control e-btn e-lib e-danger e-flat" v-on:click="onConfirmDelete">{{ data.customPermission.dialogConfirm }}</button>
      </div>
      </div>
    </ejs-dialog>

</template>


<script lang="ts">
import { Component, Prop, Vue } from "vue-property-decorator";
import ConfirmDeleteDialog from "../webhooks/confirm-delete-dialog.vue";
import dailogtext from "../../../ClientApp/locales/en.json";
import TemplateComponent from "../../../ClientApp/pages/templates/_"
@Component
({
  components:{
    ConfirmDeleteDialog,TemplateComponent
  }
})
@Component
export default class MergeTemplateDropDown extends Vue {
  data=dailogtext;
  // Count=TemplateComponent.prototype.count;
  // templatelength=[...TemplateComponent]
//     templatelength=templateIds.prototype.templateIds.length;
  // get templateLength(){
  //   return templateIds.prototype.templateIds.length
  // }
   
showConfirmDialog:boolean = false;
  mergeOptions = [
    { text: 'Create document', id: 'mergeDoc' },
    { text: 'Create bulk link', id: 'mergeLink' },
    {text:'Delete',id:'mergedelete'}
  ];

  mergeAndUse = 'Merge & Use';

  mergeOptionsSelect (args) {
    if (args.item.id === 'mergeDoc') {
      this.$nuxt.$emit('mergeTemplate', 'document');
    }
    else if(args.item.id ==='mergedelete'){
      this.showConfirmDialog=true;
      console.log('mergedelete')
    }
    else {
      this.$nuxt.$emit('mergeTemplate', 'bulklink');
    }
  }
  onConfirmDelete(){
    console.log("confirmed delete");
    this.$nuxt.$emit('deleteTemplate', 'document');
    this.showConfirmDialog=false;
    this.$nuxt.$emit('UpdateNotificationsList');
    this.$nuxt.$emit('updateGridData');
  }
  onCancelDelete(){
    console.log("canceled delete");
    this.showConfirmDialog=false;
    
  }
  setPopoverPosition () {
    const dropdown = document.querySelector('#merge_button') as HTMLElement;
    const popover = document.querySelector('#merge_button-popup') as HTMLElement;
    if (dropdown && popover) {
      popover.style.left = dropdown.getBoundingClientRect().left + "px";
    }
  }
}
</script>

<style>
#merge_button {
  border: solid 1px #0F43B3;
  color: #ffffff;
  padding: 4px 12px;
  background-color: #0565ff;
  border-radius: 4px;
  width: 148px;
  height: 32px;
}
.overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100%;
  background-color: rgba(45, 55, 72, 0.4);
  opacity: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 2147483647; /* Ensure it's above other content */
} 

.dialog-box {
 max-width: 470px; /* Same width as specified for the dialog */
}
.centered-dialog {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  padding: 20px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  background-color: #fff;
  border-radius: 8px;
}

.dialog-header {
  margin-bottom: 20px;
  text-align: center;
}

.dialog-footer {
  display: flex;
  justify-content: space-between;
  padding-top: 10px;
}
 /* .overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(45, 55, 72, 0.4);
  opacity: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 2147483647; /* Ensure it's above other content */
/* }  */ 
#merge_button:hover {
  background-color: #2e7eff;
}

.bs-template-merge:before {
  content: '\e3b4';
  font-family: Bold Sign;
  vertical-align: middle;
  font-weight: 500;
  padding-right: 10px;
}

#merge_button span.e-btn-icon.e-icons.e-icon-right.e-caret {
  display: inline-block;
  font-weight: 500;
  color: #ffffff;
  margin: 0;
  padding-left: 7px;
}

#merge_button-popup ul {
  min-width: 148px;
}
</style>
export default class TemplateComponent extends Vue {
 templateIds = [];


    deleteDialogVisible = false;
    deleteDialogTarget = document.body;
    gridSortOptions = { columns: [{ field: 'activityDate', direction: 'Descending' }], allowUnsort: false };
    isAllChecked = true;
    isShareChecked = false;
    isCreateChecked = false;
    templateIds = [];
    count=0;
    isToolbar = true;
    isShare = false;
    isDelete = false;
    isMerge = false;
    isDownload = false;
    toastPosition = { X: 'Center', Y: 'Bottom' };
    toastTarget = document.body;
    data = null;
    shareNoRecordsTemplate = this.$nuxt.$t('documents.shareNoRecordsTemplate');
    multiSelectData = null;
    uId = '';
    multiSelectFields = { text: 'first_name', value: 'first_name' };
    pageSettings = { pageSize: 20, currentPage: 1 };
    gridQuery = new Query();
    checkState = true;
    selectionOptions: SelectionSettingsModel = isStatusMatch(this.$nuxt.$route, ['drafts']) ? { enableToggle: true } : { enableToggle: true, type: 'Multiple', persistSelection: true };
    headermessage = '';
    showUserComponent = false;
    showProgress = false;
    peopleData = [];
    disableShareAction = true;
    showHeaderAddInfo = true;
    showFooterAddInfo = true;
    isSelfCreated = false;
    isGridMultipleItemsSelected = false;
    isStatusMatch = isStatusMatch;
    selectedDocumentsCount = 0;
    isSearch = false;
    searchText = '';
    searchSettings = (null as unknown) as SearchSettingsModel;
    availableGroups = null;
    templateSharedDetails = null;
    selectedTemplate = null;
    labels = [];
    clickabletags = [];
    isFilter = false;
    isTagsFilter = false;
    dialogTarget = '#template_doc'
    closeOnEscape = true;
    isResetPage = false;
    isApplyFilter = false;
    isLabelsFilterValue = false;
    isTagsFilterValue = false;
    isFilterLabels = false;
    visible = false;
    width = '570px';
    private labelRefreshDebounce: any = null;
    labelDataSource = [];
    labelPopupElement: any;
    labelFilterInputEl: any;
    isFilterTags = false;
    isLabelsEmpty = false;
    isClearFilter = false;
    creatorDataSource = [];
    updatedCreatorDatasource: any[] = [];
    isCreatedByFilterValue = false;
    creatorPopupElement: any;
    creatorFilterInputEl: any;
    isCreatedByEmpty = false;
    isFilterCreator = false;
    dateRangeWidth = '320px';
    isDateRangeFilterValue = false;
    selectedDateRangePreset = '';
    isFilterCreatedBetween = false;
    pinFilterDialogHeader = this.$nuxt.$t('documents.pinDialogHeader');
    pinFilterPlaceholder = this.$nuxt.$t('templates.pinFilterPlaceholder');
    pinFilterToolTipContent = this.$nuxt.$t('templates.pinFilterTooltip');
    animationSettings = { effect: 'None' };
    pinFilterDlgVisible = false;
    pinFilterName = '';
    pinFilterId = '';
    pinFilterDlgBtn = [
    deleteTemplate() {
      this.$nuxt.$spinner.show(true);
      const gridObj = this.$refs.grid1.ej2Instances;
      const toastObj = this.$nuxt.$store.state.toastObj;
      const selectedRecords: any[] = gridObj.getSelectedRecords();
      
      if (!selectedRecords.length) {
        this.$nuxt.$spinner.show(false);
        return;
      }
    
      const docID: string = selectedRecords[0].documentId;
      const documentName = selectedRecords[0].messageTitle;
      const ids: any[] = [];
    
      selectedRecords.forEach(item => {
        if (item && item.documentId) {
          ids.push(item.documentId);
        }
      });
    
      const successContent = this.$nuxt.$t('toast.deleteTempPermanentSuccessToastTittle', {
        documentName: documentName,
      });
      const failureContent = this.$nuxt.$t('toast.deleteTempPermanentFailureToastTittle', {
        documentName: documentName,
      });
    
      this.onNewNotificationReceived();
      this.$data.deleteDialogVisible = false;

        for (let index = 0; index < this.templateIds.length; index++) {
          const templateId = this.templateIds[index];
           this.count++
          this.$nuxt.$api.template.deleteTemplate(templateId).then(data => {
            console.log(`Deleted: ${templateId}`);
            this.hideSelectedItems(selectedRecords);
            this.scheduleGridRefresh();
            this.$nuxt.$toastService.show(successContent, 'bs_toast_success', 'bs_delete_toast');
          })
            .catch(error => {
              console.log(`Not Deleted: ${templateId}`);
            this.$nuxt.$toastService.show(failureContent, 'bs_toast_failure', 'bs_delete_toast');
            })
            .finally(() => {
            this.$nuxt.$spinner.show(false);
          });
          }
      this.isToolbar = false;
    }
}
<template>
 <ejs-dropdownbutton v-if="!showConfirmDialog"
    class="bs-template-merge"
    id="merge_button"
    :items="mergeOptions"
    :content="mergeAndUse"
    :open="setPopoverPosition"
    @select="mergeOptionsSelect"
  ></ejs-dropdownbutton>  

  <!-- <div class="e-control e-dialog e-lib confirm-delete-template-dialog e-dlg-modal e-popup e-popup-open centered-dialog" role="dialog" style="max-height: 348px; z-index: 2147483647; width: 470px;" aria-describedby="_dialog-content" aria-modal="true" tabindex="-1" >
    <div class="e-dlg-content" id="_dialog-content">
      <div class="dialog-header" style="display: flex;justify-content: space-between;">
        <div class="warning-gradient-bg"></div>
        <div class="text-content-style">
        <div>{{data.customPermission.dialogConfirmText }}</div> 
       <div> {{ count }}  </div>
        <div>{{ data.customPermission.dialogConfirmSubText }}</div>
        </div>
      </div>
      <div class="dialog-footer">
        <button type="button" class="e-control e-btn e-lib e-flat" v-on:click="onCancelDelete">{{ data.customPermission.dialogCancel }}</button>
        <button type="button" class="e-control e-btn e-lib e-danger e-flat" v-on:click="onConfirmDelete">{{ data.customPermission.dialogConfirm }}</button>
      </div>
    </div>
  </div> -->
  <ejs-dialog v-else
      ref="modalDialog"
      :isModal="true"
      width="450px"
      >
      <div>
        <div class="flex items-start pb-4 pt-4 pl-3 pr-8">
          <div class="warning-gradient-bg"></div>
          <div class="text-content-style">{{ $nuxt.$t('templates.confirmPermanentDelete') }}</div>
          <!-- <div>{{Count}}</div> -->
           <div>{{ templateLength}}</div>
        </div>
        <div class="dialog-footer">
        <button type="button" class="e-control e-btn e-lib e-flat" v-on:click="onCancelDelete">{{ data.customPermission.dialogCancel }}</button>
        <button type="button" class="e-control e-btn e-lib e-danger e-flat" v-on:click="onConfirmDelete">{{ data.customPermission.dialogConfirm }}</button>
      </div>
      </div>
    </ejs-dialog>

</template>


<script lang="ts">
import { Component, Prop, Vue } from "vue-property-decorator";
import ConfirmDeleteDialog from "../webhooks/confirm-delete-dialog.vue";
import dailogtext from "../../../ClientApp/locales/en.json";
import TemplateComponent from "../../../ClientApp/pages/templates/_"
@Component
({
  components:{
    ConfirmDeleteDialog,TemplateComponent
  }
})
@Component
export default class MergeTemplateDropDown extends Vue {
  data=dailogtext;
  // Count=TemplateComponent.prototype.count;
  // templatelength=[...TemplateComponent]
//     templatelength=templateIds.prototype.templateIds.length;
  // get templateLength(){
  //   return templateIds.prototype.templateIds.length
  // }
   selectdocumentcount=0;
   templateLength:number=0;
showConfirmDialog:boolean = false;

updateTemplateLength(length){
  console.log("helloworld")
  console.log(length)
 this.templateLength=length;
}
  mergeOptions = [
    { text: 'Create document', id: 'mergeDoc' },
    { text: 'Create bulk link', id: 'mergeLink' },
    {text:'Delete',id:'mergedelete'}
  ];    deleteTemplate() {
      this.$nuxt.$spinner.show(true);
      const gridObj = this.$refs.grid1.ej2Instances;
      const toastObj = this.$nuxt.$store.state.toastObj;
      const selectedRecords: any[] = gridObj.getSelectedRecords();
      
      if (!selectedRecords.length) {
        this.$nuxt.$spinner.show(false);
        return;
      }
    
      const docID: string = selectedRecords[0].documentId;
      const documentName = selectedRecords[0].messageTitle;
      const ids: any[] = [];
    
      selectedRecords.forEach(item => {
        if (item && item.documentId) {
          ids.push(item.documentId);
        }
      });
    
      const successContent = this.$nuxt.$t('toast.deleteTempPermanentSuccessToastTittle', {
        documentName: documentName,
      });
      const failureContent = this.$nuxt.$t('toast.deleteTempPermanentFailureToastTittle', {
        documentName: documentName,
      });
    
      this.onNewNotificationReceived();
      this.$data.deleteDialogVisible = false;

        for (let index = 0; index < this.templateIds.length; index++) {
          const templateId = this.templateIds[index];
           this.count++
          this.$nuxt.$api.template.deleteTemplate(templateId).then(data => {
            console.log(`Deleted: ${templateId}`);
            this.hideSelectedItems(selectedRecords);
            this.scheduleGridRefresh();
            this.$nuxt.$toastService.show(successContent, 'bs_toast_success', 'bs_delete_toast');
          })
            .catch(error => {
              console.log(`Not Deleted: ${templateId}`);
            this.$nuxt.$toastService.show(failureContent, 'bs_toast_failure', 'bs_delete_toast');
            })
            .finally(() => {
            this.$nuxt.$spinner.show(false);
          });
          }
          this.$nuxt.$emit("updateTemplateLength",this.templateIds.length);
          console.log(this.templateIds.length)
      this.isToolbar = false;
    }
