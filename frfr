  <div v-if="hasPdfFormFields" id="autoDetectFieldDialog" v-bind:style="getAutoDetectStyle()">
        <div id="autoDetectContent">{{ $t('preparePage.autoDetectContent') }}<span id="autoDetectAssign" v-on:click="assignDetectedFields">{{ $t('preparePage.create') }}</span></div>
        <span class="sf-icon-Close" v-on:click="hasPdfFormFields = false"></span>
      </div>



      private assignDetectedFields () {
    debugger
    this.$store.commit('sessionStorage/updateMainData', { isDocumentAddedorReplaced: false });
    if (UtilityMethods.isAnyDetectedFields(this.$store.state.sessionStorage.prepareData.formElementsData)) {
      this.confirmDeleteDetectedFields();
    } else {
      this.placeFieldsAtDetectedLocations();
    }
  }

  private placeFieldsAtDetectedLocations () {
    this.$store.commit('sessionStorage/updateMainData', { showProgress: true });
    let organizationId = null;
    const embedData = this.$store.state.sessionStorage.embedData;
    if (embedData.isEmbedPage) {
      organizationId = embedData.organizationId;
    }
    this.$nuxt.$api.preparePage.getPdfFormFields(this.$store.state.sessionStorage.mainData.parentDocumentId, organizationId).then(data => {
      this.$store.commit('sessionStorage/updateMainData', { showProgress: false });
      const pageFormElementsList: PageFormElements[] = data;
      for (let j = 0; j < pageFormElementsList.length; j++) {
        const formElements: FormElement[] = pageFormElementsList[j].formElements;
        const pageIndex = pageFormElementsList[j].pageIndex;
        const pageInfo = this.pdfFormElement.getPageInfoByPageNumber(pageIndex);
        for (const formElement of formElements) {
          formElement.elementType = formElement.elementType.toLowerCase();
          const isSelfsign = this.$store.state.sessionStorage.mainData.isSelfSign;
          if (!isSelfsign || (isSelfsign && formElement.elementType !== 'dropdown')) {
            this.updateAutoDetectedProperties(pageInfo, formElement);
            this.pdfFormElement.selectedPageIndex = pageIndex;
            if (formElement.parentRule || ConditionalLogicMethods.isConditionalField(formElement)) {
              this.pdfFormElement.removeConditionalRule(formElement);
            }
            this.pdfFormElement.add(this.pdfFormElement.updateFieldPropertyValues(formElement, true));
          }
        }
      }
      this.$data.hasPdfFormFields = false;
      this.pdfFormElement.selectedPageIndex = 1;
    }).catch((e: any) => { });


          <div class="bs-old-assignee-container" v-bind:style="{ display : !$store.state.sessionStorage.mainData.isSelfSign ? 'block' : 'none' }">
        <div class="assignee-container" id="Assign">
          <OnboardTour v-if="$store.state.sessionStorage.onboardingData.tourAction === tourAction.Assignee" style="top: 50px; left: 230px"/>
          <div id="assignee-list" style="margin-top:0;">
            <ejs-dropdownlist id="ddlRecipients" ref="ddlRecipients" :dataSource='signerDetails' popupHeight='200px' :placeholder="selectAssigneePlaceholder" :focus="onRecipientFocus"
                              :fields="assigneeFields" :value="selectedRecipients" v-model="selectedRecipients" :select="recipientChange" :itemTemplate="iTemplate" :valueTemplate="iTemplate">
            </ejs-dropdownlist>
          </div>
        </div>
      </div>
  }


return {
      value: 'sign3.png',
      height: '440px',
      width: '638px',
      isLatestVersion: false,
      header: 'Draw Signature',
      serviceUrl: '/api/pdfviewer',
      pdfFormElement: this.pdfFormElement,
      customToastObj: this.customToastObj,
      isSharedFieldSelected: this.isSharedFieldSelected,
      visible: false,
      isCustomFieldLoaded: false,
      tipposition: "RightCenter",
      topCenter: "TopCenter",
      rtlContent: context.$t('preparePage.rtlContent'),
      leftAlign: context.$t('preparePage.leftAlign'),
      centerAlign: context.$t('preparePage.centerAlign'),
      rightAlign: context.$t('preparePage.rightAlign'),
      toolTipOpen: 'Auto',
      tooltipContent: this.$store.state.sessionStorage.mainData.isSelfSign ? context.$t('preparePage.selfSignToolTipContent') : context.$t('preparePage.toolTipContent'),
      selectedRecipients: defaultSignerDetails.id,
      assigneeFields: {
        text: assigneeTextField,
        value: 'id'
      },




    private drop (args: any): void {
    const context = (this as any);
    this.$data.hasPdfFormFields = false;
    window.sessionStorage.setItem('isModified', 'True');
    let [customFieldId, dataSyncTag] = ['', ''];
    this.$store.commit('sessionStorage/updateMainData', { isPageModified: true, preventDraftSave: false, isDocumentAddedorReplaced: false });
    if (args.formElement) {
      let mixPanelAction: MixPanelAction = MixPanelAction.AddFormFieldsClick;
      let userInsightAction: UserInsightAction = UserInsightAction.AddFormFieldsAction;
      [customFieldId, dataSyncTag] = [args.formElement.customFieldId, args.formElement.dataSyncTag]
      if (this.$data.isEmbedPage) {
        mixPanelAction = MixPanelAction.EmbeddedAddFormFieldsClick;
        userInsightAction = UserInsightAction.EmbeddedAddFormFieldsAction;
      }
      this.$nuxt.$userInsight.track(mixPanelAction, new UserInsight({ Page: UserInsightPage.PreparePage, Action: userInsightAction, Origin: UserInsightOrigin.PrepareDocument, ElementType: this.advanceSettingsInstance.getElementType(args.formElement.elementType) }));
      this.$data.selectedElementType = this.advanceSettingsInstance.selectedElementType = args.formElement.elementType;
      this.advanceSettingsInstance.isMultiSelect = false;
      this.advanceSettingsInstance.hideAssignOption = false;
      if (!args.formElement.signerId && this.$data.selectedRecipients && args.formElement.elementType !== 'label' && args.formElement.elementType !== 'hyperlink') {
        args.formElement.signerId = this.$data.selectedRecipients;
      }
      if (!this.$data.showThumbContainer) {
        this.showAdvanceSettings(args.formElement.elementType);
      }
      if (!this.$data.isMobileDevice) {
        this.advanceSettingsInstance.showAdvance();
      }
      if (this.pdfFormElement.enableFieldEditing && (args.formElement.elementType === 'signature' || args.formElement.elementType === 'initial')) {
        if (!args.formElement.value) {
          this.openSignDialog(args.formElement.elementType);
        } else {
          if (this.pdfFormElement.enableFieldEditing) {
            const pageData: { [key: string]: number } = this.pdfFormElement.moveElementToAbsolutePage(args.formElement);
            this.advanceSettingsInstance.updateFormElement('signerId', this.advanceSettingsInstance.selectedAssignee, { id: args.formElement.id });
            this.thumbnailInstance.updateThumbnailFieldCount(pageData.activePageIndex);
          }
        }
        this.advanceSettingsInstance.enablePreviewPage();
      } else if (this.pdfFormElement.enableFieldEditing && args.formElement.elementType === 'image') {
        if (!args.formElement.value) {
          this.imageInstance.show(this.pdfFormElement.selectedFormElement);
        } else {
          if (this.pdfFormElement.enableFieldEditing) {
            const pageData: { [key: string]: number } = this.pdfFormElement.moveElementToAbsolutePage(args.formElement);
            this.advanceSettingsInstance.updateFormElement('signerId', this.advanceSettingsInstance.selectedAssignee, { id: args.formElement.id });
            this.thumbnailInstance.updateThumbnailFieldCount(pageData.activePageIndex);
          }
        }
        this.advanceSettingsInstance.enablePreviewPage();
      } else if (this.pdfFormElement.enableFieldEditing && args.formElement.elementType === 'editabledate') {
        if (!args.formElement.value) {
          this.$data.datePickerValue = null;
          this.setDatePickerDetails();
        } else {
          if (this.pdfFormElement.enableFieldEditing) {
            const pageData: { [key: string]: number } = this.pdfFormElement.moveElementToAbsolutePage(args.formElement);
            this.advanceSettingsInstance.updateFormElement('signerId', this.advanceSettingsInstance.selectedAssignee, { id: args.formElement.id });
            this.thumbnailInstance.updateThumbnailFieldCount(pageData.activePageIndex);
          }
        }
        this.advanceSettingsInstance.enablePreviewPage();
      } else if (this.$data.isMobileMode && args.formElement.elementType === 'radiobutton') {
        this.advanceSettingsInstance.updateRadioButtonValues(args.formElement);
      } else {
        const pageData: { [key: string]: number } = this.pdfFormElement.moveElementToAbsolutePage(args.formElement);
        if (this.pdfFormElement.enableFieldEditing && args.formElement.elementType === 'datepicker') {
          const dateTimeFormat: string = UtilityMethods.getDateTimeFormat(args.formElement.label, args.formElement.timeFormat);
          this.advanceSettingsInstance.updateFormElement('value', this.globalize.formatDate(new Date(), { format: dateTimeFormat }), { id: args.formElement.id });
        }
        if (args.formElement.elementType === 'label') {
          this.pdfFormElement.startEdit();
        } else {
          if (args.formElement.elementType === 'textbox') {
            this.advanceSettingsInstance.textFieldLabel = '';
          } else if (args.formElement.elementType === 'dropdown') {
            this.$data.dropdownPlaceholder = this.advanceSettingsInstance.dropdownPlaceholder = context.$t('common.dropdownTxt');
            this.advanceSettingsInstance.textFieldLabel = '';
          }
          this.advanceSettingsInstance.enablePreviewPage();
        }
        this.thumbnailInstance.updateThumbnailFieldCount(pageData.activePageIndex);
      }
      this.advanceSettingsInstance.updatePositionForFormFields(args.formElement);
      if (customFieldId && dataSyncTag) {
        this.advanceSettingsInstance.processDataSyncTags();
        if (this.advanceSettingsInstance.dataSyncTagElementIdList.length > 1) {
          this.showPropertyChangeToastForCustomField();
        }
      }
    }
    this.advanceSettingsInstance.dataSyncTag = customFieldId && dataSyncTag ? dataSyncTag : '';
  }
