    [HttpDelete]
    [Authorize(Policy = TemplateAuthorizationOption.CanDeleteTemplate)]
    public async Task<ActionResult> DeleteTemplate([Guid(ErrorMessage = ValidationMessages.ValidDocumentId)][Required(ErrorMessage = ValidationMessages.Required)]string[] templateId)
    {
      if (string.IsNullOrEmpty(templateId))
      {
        return this.BadRequest("Failure");
      }

      string baseUrl = this.requestDetailsService.HostedDomain;

      dynamic[] procParams = new dynamic[] { templateId };

      // isAccessTid is set to false. since, we need to delete both the shared and original template types.
      var accessRightsList = await this.templateService.GetTemplatesByDocumentId(this.userDataService, templateId, false).ConfigureAwait(false);
      if (accessRightsList.Count > 0)
      {
        var clearContainerTask = this.documentService.ClearContainers(templateId, this.userDataService.OrganizationId);
        await this.templateService.DeleteTemplatesByDocumentIdAsync(this.userDataService.OrganizationId, templateId).ConfigureAwait(false);
        await clearContainerTask.ConfigureAwait(false);
        await this.documentService.NotifyDeletedTemplateUsers(accessRightsList, new Uri(baseUrl), this.hubContext, this.teamManagement).ConfigureAwait(false);
        _ = this.templateService.LogDeleteUserActivityAsync(accessRightsList, this.orgActivityService).ConfigureAwait(false);
        return this.Content("Success");
      }

      return this.BadRequest("Failure");
    }


modify it for deleting multiple template  once all the template delete it need to show suceess and controller method only has to send the template id and service method has all the methods for delete
once each template delete email should be sent by using notifydeletedtemplateduser once everything completed and sucess it shows sucess 

below service method 
   public async Task<bool> DeleteTemplatesByDocumentIdAsync(string orgId, string documentId)
    {
      string indexName = orgId;
      DeleteByQueryRequest<AccessRightsDetails> deleteQuery = new DeleteByQueryRequest<AccessRightsDetails>(indexName)
      {
        Query = new BoolQuery
        {
          Must = new QueryContainer[]
          {
            new TermQuery { Field = ConstantSearchFields.DocumentType, Value = DocumentType.Template } &&
            new TermQuery { Field = ConstantSearchFields.Status, Value = DocumentStatus.Completed } &&
            new TermQuery { Field = ConstantSearchFields.DocumentId, Value = documentId },
          },
        },
      };

      await this.elasticClient.DeleteByQueryAsync(deleteQuery).ConfigureAwait(false);
      return true;
    }




