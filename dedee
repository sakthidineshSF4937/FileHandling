  private async Task ProcessAndExtractPdfFormFields(PdfLoadedDocument loadedDocument, string parentId, string childId, string organizationId)
    {
      if (loadedDocument != null)
      {
        List<TextTagDefinition>  definitionTags=null;
        // Get all the form fields.
      //  List<TextTagDefinition> textTags= documentTextExtractor.ExtractTextTags( definitionTags,ref pageIndex);
       var pageIndex=0;
     List<TextTagDefinition> tags = new List<TextTagDefinition>();

      for (int i = 0; i < loadedDocument.Pages.Count; i++)
      {
        TextLineCollection textLineCollection = null;
        loadedDocument.Pages[i].ExtractText(out textLineCollection);

        foreach (var textLine in textLineCollection.TextLine)
        {
          definitionTags = definitionTags == null ? new List<TextTagDefinition>() : definitionTags;
          TextTagParser textParser = new TextTagParser(new List<string>() { textLine.Text }, definitionTags);
          var parsedTags = textParser.Parse();
          Syncfusion.Drawing.SizeF pageSize = loadedDocument.Pages[i].Size;
          this.SetBounds(textLine, parsedTags, pageSize);
          int index = 1;
          parsedTags = parsedTags.Select(
              c =>
              {
                c.PageNumber = index;

                return c;
              })
            .ToList();
          tags.AddRange(parsedTags);
        }

        pageIndex++;
      }
        PdfLoadedForm loadedForm = loadedDocument.Form;
        PdfLoadedFormFieldCollection fieldCollection = loadedForm?.Fields;
        List<PageFormElements> pageFormElements = new List<PageFormElements>();
        List<FormElement> formElements = new List<FormElement>();
        var finalFormElement = new PageFormElements();
        var finalFormElements = new PageFormElements();

        if (fieldCollection != null)
        {
          foreach (PdfLoadedField field in fieldCollection)
          {
            switch (field)
            {
              case PdfLoadedTextBoxField textBoxField:
              case PdfLoadedCheckBoxField checkBoxField:
              case PdfLoadedComboBoxField dropDownField:

                finalFormElement = this.PrepareFormFields(loadedDocument, field);
                pageFormElements.Add(finalFormElement);
                break;

              case PdfLoadedSignatureField signatureField:
                {
                // condition to avoid extracting the fields from signed document.
                if (signatureField.Bounds.X != 0 && signatureField.Bounds.Y != 0)
                {
                  var bounds = this.ConvertToPixelsFromPoints(signatureField.Bounds);
                  finalFormElement = this.PrepareFormFields(loadedDocument, field, bounds);
                  pageFormElements.Add(finalFormElement);
                }
                }

                break;

              case PdfLoadedRadioButtonListField radioButton:
                {
                  PdfLoadedRadioButtonItemCollection radioCollection = radioButton.Items;
                  List<FormElement> childFormElement = new List<FormElement>();
                  foreach (PdfLoadedRadioButtonItem item in radioCollection)
                  {
                    var bound = this.ConvertToPixelsFromPoints(item.Bounds);
                    FormElement childForm = new FormElement();
                    childForm.Id = item.OptionValue;
                    childForm.ElementType = "child";
                    childForm.Bounds = bound;
                    childForm.GroupName = field.Name;
                    childForm.FontFamily = GetFontFamily(item.Font.Name);
                    childForm.FontSize = item.Font.Size;
                    childForm.AllowEditing = true;
                    childForm.EnableWrapping = false;
                    childForm.IsRequired = true;
                    childFormElement.Add(childForm);
                  }

                  finalFormElement = this.PrepareFormFields(loadedDocument, field);
                  finalFormElement.FormElements[0].Children = childFormElement.ToArray();
                  pageFormElements.Add(finalFormElement);
              }

                break;
            }
          }

          foreach(var tag in tags)
          {
            var syncfusionRectangle = ConvertToSyncfusionRectangleF(tag.Bounds); 
            var bounds=this.ConvertToPixelsFromPoints(syncfusionRectangle);
            finalFormElements = this.PrepareFormField(loadedDocument,tag,bounds,tag.Type);
            pageFormElements.Add(finalFormElements);
          }

          var group = pageFormElements.GroupBy(x => x.PageIndex).Select(x => x).ToList();
          List<PageFormElements> newPageFormElements = new List<PageFormElements>();

          // forming page form elements based on the page index value.
          for (int i = 0; i < group.Count; i++)
          {
            var checks = group[i].SelectMany(x => x.FormElements).ToList();
            PageFormElements formElement = new PageFormElements();
            formElement.PageIndex = group[i].Key;
            formElement.FormElements = checks.ToArray();
            newPageFormElements.Add(formElement);
          }

          if (newPageFormElements != null && newPageFormElements.Count > 0)
          {
            BlobContainerClient cloudBlobContainer = null;
            BlobClient blobClientDocument = null;
            cloudBlobContainer = await this.CloudStorage.GetContainer(parentId, organizationId).ConfigureAwait(false);
            if (string.IsNullOrEmpty(childId))
            {
              blobClientDocument = cloudBlobContainer.GetBlobClient($"{DbConstants.DocumentPdfFields}");
            }
            else
            {
              blobClientDocument = cloudBlobContainer.GetBlobClient($"{childId}{DbConstants.DocumentPdfFields}");
            }

            await this.CloudStorage.UploadFromByteArrayAsync(blobClientDocument, BinarySerializer.Serialize<List<PageFormElements>>(newPageFormElements), 0, true).ConfigureAwait(false);
          }
        }
      }
    }


 private PageFormElements PrepareFormField(
    PdfLoadedDocument loadedDocument, 
    TextTagDefinition tag, // Required parameter
    BoldSign.Base.Models.Rectangle bounds, // Required parameter
    BoldSign.ApiManagement.Models.FieldType? field // Required parameter
)
    {
      List<FormElement> form = new List<FormElement>();
      FormElement formelement = this.CreateFormElementsFromPdfField(field, bounds,tag);
      if (formelement.ElementType != null)
      {
        form.Add(formelement);
      }

      PageFormElements preparedFields = new PageFormElements();
      preparedFields.PageIndex = pageIndex;
      preparedFields.FormElements = form.ToArray();
      return preparedFields;
    }


     private FormElement CreateFormElementsFromPdfField(BoldSign.ApiManagement.Models.FieldType? field, BoldSign.Base.Models.Rectangle bounds,TextTagDefinition tag)
    {
      FormElement formElement = new FormElement();
      BoldSign.Base.Models.Rectangle bound = bounds;

      switch (field)
      {
        case BoldSign.ApiManagement.Models.FieldType.TextBox:
          {
            formElement.ElementType = "TextBox";
            formElement.FontFamily = GetFontFamily((tag.Font).ToString());
          //  formElement.FontSize = this.converter.ConvertToPixels(textBoxField.Font.Size, PdfGraphicsUnit.Point);
            formElement.EnableWrapping = true;
            formElement.Bounds = bound;
            formElement.MaxHeight = bound.Height;
            formElement.MaxWidth = bound.Width;
          }

          break;
        case BoldSign.ApiManagement.Models.FieldType.Signature:
          formElement.ElementType = "Signature";
          formElement.FontFamily = GetFontFamily((tag.Font).ToString());
        //  formElement.FontSize = signatureField.Font.Size;
          formElement.EnableWrapping = false;
          formElement.Bounds = bounds;
          formElement.MaxHeight = bounds.Height;
          formElement.MaxWidth = bounds.Width;
          break;
        case BoldSign.ApiManagement.Models.FieldType.CheckBox:
          formElement.ElementType = "CheckBox";
          formElement.FontFamily = GetFontFamily((tag.Font).ToString());
          // formElement.FontSize = checkBoxField.Font.Size;
          formElement.EnableWrapping = false;
          formElement.Value = "off";
          formElement.Bounds = bound;
          formElement.MaxHeight = bound.Height;
          formElement.MaxWidth = bound.Width;
          break;
        case BoldSign.ApiManagement.Models.FieldType.RadioButton:
          formElement.ElementType = "RadioButton";
          formElement.FontFamily = GetFontFamily((tag.Font).ToString());
         // formElement.FontSize = radioField.Font.Size;
          formElement.EnableWrapping = false;
          formElement.GroupName = tag.RadioGroupName;
          break;
        case BoldSign.ApiManagement.Models.FieldType.Dropdown:
          formElement.ElementType = "DropDown";
          formElement.FontFamily = GetFontFamily((tag.Font).ToString());
         // formElement.FontSize = this.converter.ConvertToPixels(dropDownField.Font.Size, PdfGraphicsUnit.Point);
          formElement.EnableWrapping = false;
          formElement.Bounds = bound;
          formElement.MaxHeight = bound.Height;
          formElement.MaxWidth = bound.Width;
          formElement.Label = tag.Label;
          formElement.Value = tag.Value;
         // formElement.DropdownOptions = dropDownField.Values.ToList<PdfLoadedListItem>().Select(item => item.Value).ToArray();
          break;
      }

      formElement.Id = tag.FieldId;
      formElement.IsRequired = tag.IsRequired;
      formElement.AllowEditing = true;
      return formElement;
    }
