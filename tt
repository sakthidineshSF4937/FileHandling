    public virtual async Task<bool> DeleteTemplatesItemsAsync(string[] templateIds, ClaimsPrincipal claims, IAuthorizationService authorizationService, IDocumentService documentService, UserDataService userDataService, HttpContext context, IOrgActivityService orgActivityService, IHubContext<NotificationHub> hubConnection, RequestDetailsService requestDetailsService)
    {
      HttpContext httpContext = context;
      var permissionList = await new AccessRightsReader(context, null, this.apiRequestService)
    .GetPermissionsListAsync(userDataService, this.cacheService).ConfigureAwait(false);
      var allowedGroupsTuple = await PermissionAuthorizationHandler.GetResourceOwnerAllowedGroups(userDataService, context, Permissions.TemplateResources, this.cacheService, this.teamManagement, this.apiRequestService).ConfigureAwait(false);
      var groupData = await this.teamManagement.GetTeamListAsync(userDataService).ConfigureAwait(false);
      context.Items.TryAdd(DocumentDetailsReader.TeamListCache, groupData);
      var deleteResults = new ConcurrentDictionary<string, bool>();
      var deleteTasks = templateIds.Select(async templateId =>
      {
        try
        {
        var accessDetails = await this.GetTemplateByDocumentId(templateId, userDataService, DocumentStatus.Completed, allowedGroupsTuple.Item1).ConfigureAwait(false);

        if (accessDetails == null)
        {
            deleteResults[templateId] = false;
            return;
        }

        var templateDetailsReader = new TemplateDetailsReader(context, accessDetails, permissionList, this.cacheService, this.apiRequestService);
        var role = new TemplatePolicy(context, templateDetailsReader, this.apiRequestService);

        var authorizationRequirements = new List<IAuthorizationRequirement> { new TemplateDeleteRequirement() };

        bool policySucceed = await documentService.GetPolicyStatus(authorizationRequirements, claims, role).ConfigureAwait(false);
        string baseUrl = requestDetailsService.HostedDomain;
        if (policySucceed)
        {
            var result = await this.AddDeletedTemplateItemAsync(templateId, documentService, userDataService).ConfigureAwait(false);
            var accessRightsList = await this.GetTemplatesByDocumentId(userDataService, templateId, false).ConfigureAwait(false);
            if (accessRightsList.Count > 0)
             {
              await documentService.NotifyDeletedTemplateUsers(accessRightsList, new Uri(baseUrl), hubConnection, this.teamManagement).ConfigureAwait(false);
              _ = this.LogDeleteUserActivityAsync(accessRightsList, orgActivityService).ConfigureAwait(false);
        }

            deleteResults[templateId] = result;
        }
        else
        {
            deleteResults[templateId] = false;
        }
    }
    catch (Exception)
    {
        deleteResults[templateId] = false;
    }
    }).ToList();
      await Task.WhenAll(deleteTasks).ConfigureAwait(false);
      return deleteResults.Values.All(result => result);
}

public async Task<List<AccessRightsDetailsExtend>> GetTemplatesByDocumentId(UserDataService userDataService, string documentId, bool isAccessTid = false)
    {
      QueryContainer queryContainer = new BoolQuery
      {
        Must = new QueryContainer[]
        {
          new TermQuery { Field = ConstantSearchFields.DocumentType, Value = DocumentType.Template } &&
          new TermQuery { Field = ConstantSearchFields.Status, Value = DocumentStatus.Completed } &&
          new TermQuery { Field = ConstantSearchFields.DocumentId, Value = documentId },
        },
      };

      if (isAccessTid)
      {
        queryContainer = queryContainer && new ExistsQuery { Field = ConstantSearchFields.AccessTid };
      }

      SearchRequest<AccessRightsDetails> searchRequest =
        new SearchRequest<AccessRightsDetails>(userDataService.OrganizationId)
        {
          Query = queryContainer,
          Sort = new List<ISort>
          {
            new FieldSort { Field = ConstantSearchFields.ActivityDate, Order = SortOrder.Descending },
          },
          Size = 50,
        };

      ISearchResponse<AccessRightsDetails> searchResponse =
        await this.elasticClient.SearchAsync<AccessRightsDetails>(searchRequest).ConfigureAwait(false);
      var result = AccessRightsDetailsExtend.CopyToList(searchResponse.Documents.ToList(), userDataService.Id);
      return result;
    }
